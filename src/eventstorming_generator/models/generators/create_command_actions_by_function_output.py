from pydantic import Field
from typing import List, Optional, Literal, Union
from ..base import BaseModelWithItem

SourceReferences = Optional[List[List[List[Union[int, str]]]]]

class PropertyModel(BaseModelWithItem):
    """Represents a property with name, optional type, and key information"""
    name: str = Field(description="Property name")
    type: Optional[str] = Field(None, description="Property type (omit if String)")
    isKey: Optional[bool] = Field(None, description="Whether this property is a primary key")
    sourceReferences: SourceReferences = Field(None, description="Source reference from the functional requirements")

class CommandActionIds(BaseModelWithItem):
    """Represents the IDs section of a command action"""
    aggregateId: str = Field(description="ID of the target aggregate")
    commandId: str = Field(description="ID of the command")

class EventActionIds(BaseModelWithItem):
    """Represents the IDs section of an event action"""
    aggregateId: str = Field(description="ID of the target aggregate")
    eventId: str = Field(description="ID of the event")

class ReadModelActionIds(BaseModelWithItem):
    """Represents the IDs section of a read model action"""
    aggregateId: str = Field(description="ID of the target aggregate")
    readModelId: str = Field(description="ID of the read model")

class CommandArgs(BaseModelWithItem):
    """Arguments for command actions"""
    commandName: str = Field(description="Name of the command")
    commandAlias: str = Field(description="Display alias for the command")
    api_verb: Literal["POST", "PUT", "PATCH", "DELETE"] = Field(description="HTTP verb for the command")
    properties: List[PropertyModel] = Field(description="List of command properties")
    outputEventIds: List[str] = Field(description="List of event IDs generated by this command")
    actor: str = Field(description="Actor role(Can be User, System, Admin, etc.)")
    sourceReferences: SourceReferences = Field(None, description="Source reference from the functional requirements")

class EventArgs(BaseModelWithItem):
    """Arguments for event actions"""
    eventName: str = Field(description="Name of the event")
    eventAlias: str = Field(description="Display alias for the event")
    properties: List[PropertyModel] = Field(description="List of event properties")
    sourceReferences: SourceReferences = Field(None, description="Source reference from the functional requirements")

class ReadModelArgs(BaseModelWithItem):
    """Arguments for read model actions"""
    readModelName: str = Field(description="Name of the read model")
    readModelAlias: str = Field(description="Display alias for the read model")
    isMultipleResult: bool = Field(description="Whether the read model returns multiple results")
    queryParameters: List[PropertyModel] = Field(description="List of query parameters")
    actor: str = Field(description="Actor role(Can be User, System, Admin, etc.)")
    sourceReferences: SourceReferences = Field(None, description="Source reference from the functional requirements")

class CommandAction(BaseModelWithItem):
    """Represents a command action"""
    actionName: str = Field(description="Name of the action")
    objectType: Literal["Command"] = Field(description="Type of object (always 'Command')")
    ids: CommandActionIds = Field(description="ID information for the action")
    args: CommandArgs = Field(description="Arguments for the command")

class EventAction(BaseModelWithItem):
    """Represents an event action"""
    actionName: str = Field(description="Name of the action")
    objectType: Literal["Event"] = Field(description="Type of object (always 'Event')")
    ids: EventActionIds = Field(description="ID information for the action")
    args: EventArgs = Field(description="Arguments for the event")

class ReadModelAction(BaseModelWithItem):
    """Represents a read model action"""
    actionName: str = Field(description="Name of the action")
    objectType: Literal["ReadModel"] = Field(description="Type of object (always 'ReadModel')")
    ids: ReadModelActionIds = Field(description="ID information for the action")
    args: ReadModelArgs = Field(description="Arguments for the read model")

class ActionResult(BaseModelWithItem):
    """Contains all generated actions for the aggregate"""
    commandActions: List[CommandAction] = Field(description="List of command actions to be generated")
    eventActions: List[EventAction] = Field(description="List of event actions to be generated")
    readModelActions: List[ReadModelAction] = Field(description="List of read model actions to be generated")

class CreateCommandActionsByFunctionOutput(BaseModelWithItem):
    """Output model for creating command actions by function with structured reasoning and results"""
    inference: str = Field(description="Detailed reasoning and analysis for the generated actions")
    result: ActionResult = Field(description="The generated actions for commands, events, and read models")