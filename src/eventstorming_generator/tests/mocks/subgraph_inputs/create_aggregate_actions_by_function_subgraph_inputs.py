from ....models import *

create_aggregate_actions_by_function_subgraph_inputs = State(inputs=InputsModel(selectedDraftOptions={'BookManagement': {'boundedContext': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: BookManagement (도서 관리)\n\n## Role\n도서 등록, 상태 관리, 폐기 등 도서의 전체 라이프사이클을 관리한다. 도서 등록 시 ISBN 중복 및 유효성 검증, 카테고리 선택, 상태 변경(대출가능/대출중/예약중/폐기) 등 도서의 상태와 관련된 모든 비즈니스 규칙을 담당한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStatusChanged\n\n# Requirements\n\n## userStory\n\n도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해\n\n등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해\n\n## DDL\n\n```sql\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n```\n```sql\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n```\n## Event\n\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 새로운 도서를 등록하여 도서관 시스템에 추가하였음. 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받고, ISBN 중복 및 유효성 검증을 완료함.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)"\n  ],\n  "outputs": [\n    "신규 도서가 \'대출가능\' 상태로 등록됨"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        1\n      ],\n      [\n        3,\n        48\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "도서 상태 변경 트리거(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "도서 상태(대출가능, 대출중, 예약중, 폐기 등)"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "BookLent",\n    "BookReturned",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        172\n      ],\n      [\n        3,\n        244\n      ]\n    ],\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 훼손 또는 분실되어 사서에 의해 폐기 처리됨. 폐기된 도서는 더 이상 대출이 불가능함.",\n  "inputs": [\n    "도서 식별자",\n    "폐기 사유(훼손/분실 등)"\n  ],\n  "outputs": [\n    "도서 상태가 \'폐기\'로 변경됨"\n  ],\n  "nextEvents": [],\n  "refs": [\n    [\n      [\n        3,\n        246\n      ],\n      [\n        3,\n        305\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/반납 프로세스 (LoanProcess)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### BookManagement-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 도서 상태 변경 이력도 이력 컨텍스트에서 관리해야 하므로, 도서 관리에서 상태 변경 이벤트를 발행하면 이력 컨텍스트가 이를 구독하여 기록한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 상태 변경 이력을 기록한다.', 'id': 'c6dc75f2-e219-44ad-904e-da2c1b32daab', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': 'c6dc75f2-e219-44ad-904e-da2c1b32daab', 'style': '{}', 'width': 560, 'x': 600, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': 'c6dc75f2-e219-44ad-904e-da2c1b32daab', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'BookManagement', 'traceName': 'BookManagement', 'displayName': '도서 관리', 'oldName': '', 'policies': [], 'portGenerated': 8080, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_d9714d920648e6f9bf12d149e324d15b', 'requirements': {'ddl': "CREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM('소설', '비소설', '학술', '잡지') NOT NULL,\n    status ENUM('대출가능', '대출중', '예약중', '폐기') DEFAULT '대출가능',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM('대출가능', '대출중', '예약중', '폐기'),\n    new_status ENUM('대출가능', '대출중', '예약중', '폐기') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)", 'ddlFields': [{'fieldName': 'book_id', 'refs': [[[2, 5], [2, 30]], [[20, 5], [20, 24]]]}, {'fieldName': 'title', 'refs': [[[3, 5], [3, 31]]]}, {'fieldName': 'isbn', 'refs': [[[4, 5], [4, 36]]]}, {'fieldName': 'author', 'refs': [[[5, 5], [5, 32]]]}, {'fieldName': 'publisher', 'refs': [[[6, 5], [6, 35]]]}, {'fieldName': 'registration_date', 'refs': [[[9, 5], [9, 56]]]}, {'fieldName': 'disposal_date', 'refs': [[[10, 5], [10, 31]]]}, {'fieldName': 'disposal_reason', 'refs': [[[11, 5], [11, 29]]]}, {'fieldName': 'created_at', 'refs': [[[12, 5], [12, 49]]]}, {'fieldName': 'updated_at', 'refs': [[[13, 5], [13, 77]]]}, {'fieldName': 'history_id', 'refs': [[[19, 5], [19, 33]]]}, {'fieldName': 'change_reason', 'refs': [[[23, 5], [23, 30]]]}, {'fieldName': 'changed_by', 'refs': [[[24, 5], [24, 27]]]}, {'fieldName': 'change_date', 'refs': [[[25, 5], [25, 50]]]}], 'description': '# Bounded Context Overview: BookManagement (도서 관리)\n\n## Role\n도서 등록, 상태 관리, 폐기 등 도서의 전체 라이프사이클을 관리한다. 도서 등록 시 ISBN 중복 및 유효성 검증, 카테고리 선택, 상태 변경(대출가능/대출중/예약중/폐기) 등 도서의 상태와 관련된 모든 비즈니스 규칙을 담당한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStatusChanged\n\n# Requirements\n\n## userStory\n\n도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해\n\n등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해\n\n## DDL\n\n```sql\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n```\n```sql\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n```\n## Event\n\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 새로운 도서를 등록하여 도서관 시스템에 추가하였음. 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받고, ISBN 중복 및 유효성 검증을 완료함.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)"\n  ],\n  "outputs": [\n    "신규 도서가 \'대출가능\' 상태로 등록됨"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        1\n      ],\n      [\n        3,\n        48\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "도서 상태 변경 트리거(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "도서 상태(대출가능, 대출중, 예약중, 폐기 등)"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "BookLent",\n    "BookReturned",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        172\n      ],\n      [\n        3,\n        244\n      ]\n    ],\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 훼손 또는 분실되어 사서에 의해 폐기 처리됨. 폐기된 도서는 더 이상 대출이 불가능함.",\n  "inputs": [\n    "도서 식별자",\n    "폐기 사유(훼손/분실 등)"\n  ],\n  "outputs": [\n    "도서 상태가 \'폐기\'로 변경됨"\n  ],\n  "nextEvents": [],\n  "refs": [\n    [\n      [\n        3,\n        246\n      ],\n      [\n        3,\n        305\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/반납 프로세스 (LoanProcess)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### BookManagement-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 도서 상태 변경 이력도 이력 컨텍스트에서 관리해야 하므로, 도서 관리에서 상태 변경 이벤트를 발행하면 이력 컨텍스트가 이를 구독하여 기록한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 상태 변경 이력을 기록한다.', 'event': '{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 새로운 도서를 등록하여 도서관 시스템에 추가하였음. 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받고, ISBN 중복 및 유효성 검증을 완료함.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)"\n  ],\n  "outputs": [\n    "신규 도서가 \'대출가능\' 상태로 등록됨"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        1\n      ],\n      [\n        3,\n        48\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "도서 상태 변경 트리거(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "도서 상태(대출가능, 대출중, 예약중, 폐기 등)"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "BookLent",\n    "BookReturned",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        172\n      ],\n      [\n        3,\n        244\n      ]\n    ],\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 훼손 또는 분실되어 사서에 의해 폐기 처리됨. 폐기된 도서는 더 이상 대출이 불가능함.",\n  "inputs": [\n    "도서 식별자",\n    "폐기 사유(훼손/분실 등)"\n  ],\n  "outputs": [\n    "도서 상태가 \'폐기\'로 변경됨"\n  ],\n  "nextEvents": [],\n  "refs": [\n    [\n      [\n        3,\n        246\n      ],\n      [\n        3,\n        305\n      ]\n    ]\n  ]\n}', 'eventNames': 'BookRegistered, BookDisposed, BookStatusChanged 이벤트가 발생할 수 있어.', 'userStory': "도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해\n등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해"}}, 'cons': {'cohesion': '도서 카테고리 관리 등 확장 시 도서 Aggregate가 점차 비대해질 수 있습니다.', 'complexity': '상태 전이, 이력 관리 등 다양한 책임이 한 곳에 집중되어 복잡도가 증가할 수 있습니다.', 'consistency': '대출/예약 상태와의 동기화는 이벤트 기반이므로 일시적 비일관성이 발생할 수 있습니다.', 'coupling': '도서와 직접 관련 없는 기능이 추가될 경우 Aggregate가 불필요하게 커질 수 있습니다.', 'encapsulation': '모든 도서 관련 로직이 집중되어 있어, 일부 도메인 규칙이 복잡해질 수 있습니다.', 'independence': '카테고리 등 일부 속성의 독립적 관리가 어렵습니다.', 'performance': '도서 수가 많아질 경우 단일 Aggregate에 대한 동시 접근이 증가할 수 있습니다.'}, 'description': '# Bounded Context Overview: BookManagement (도서 관리)\n\n## Role\n도서 등록, 상태 관리, 폐기 등 도서의 전체 라이프사이클을 관리한다. 도서 등록 시 ISBN 중복 및 유효성 검증, 카테고리 선택, 상태 변경(대출가능/대출중/예약중/폐기) 등 도서의 상태와 관련된 모든 비즈니스 규칙을 담당한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStatusChanged\n\n# Requirements\n\n## userStory\n\n도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해\n\n등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해\n\n## DDL\n\n```sql\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n```\n```sql\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n```\n## Event\n\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 새로운 도서를 등록하여 도서관 시스템에 추가하였음. 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받고, ISBN 중복 및 유효성 검증을 완료함.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)"\n  ],\n  "outputs": [\n    "신규 도서가 \'대출가능\' 상태로 등록됨"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        1\n      ],\n      [\n        3,\n        48\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "도서 상태 변경 트리거(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "도서 상태(대출가능, 대출중, 예약중, 폐기 등)"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "BookLent",\n    "BookReturned",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        172\n      ],\n      [\n        3,\n        244\n      ]\n    ],\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 훼손 또는 분실되어 사서에 의해 폐기 처리됨. 폐기된 도서는 더 이상 대출이 불가능함.",\n  "inputs": [\n    "도서 식별자",\n    "폐기 사유(훼손/분실 등)"\n  ],\n  "outputs": [\n    "도서 상태가 \'폐기\'로 변경됨"\n  ],\n  "nextEvents": [],\n  "refs": [\n    [\n      [\n        3,\n        246\n      ],\n      [\n        3,\n        305\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/반납 프로세스 (LoanProcess)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### BookManagement-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 도서 상태 변경 이력도 이력 컨텍스트에서 관리해야 하므로, 도서 관리에서 상태 변경 이벤트를 발행하면 이력 컨텍스트가 이를 구독하여 기록한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 상태 변경 이력을 기록한다.', 'isAIRecommended': False, 'pros': {'cohesion': '도서의 상태, 등록, 폐기, 상태 변경 이력 등 도서 라이프사이클 전반을 하나의 Aggregate에서 일관성 있게 관리할 수 있습니다.', 'complexity': '단일 Aggregate로 관리되어 개발 및 유지보수가 단순합니다.', 'consistency': '도서 상태 변경, 폐기 등 주요 비즈니스 규칙을 단일 트랜잭션 경계 내에서 강하게 보장할 수 있습니다.', 'coupling': '대출/예약과의 관계는 ValueObject 참조로 처리하여, 컨텍스트 간 결합도를 최소화합니다.', 'encapsulation': '도서 관련 비즈니스 규칙과 상태 전이 로직이 Aggregate 내부에 완전히 은닉되어 외부에서 임의로 변경할 수 없습니다.', 'independence': '도서 관리 정책 변경 시 다른 Aggregate에 영향 없이 독립적으로 진화할 수 있습니다.', 'performance': '도서 상태 조회, 변경, 이력 추적 등 대부분의 작업이 단일 Aggregate 접근으로 빠르게 처리됩니다.'}, 'structure': [{'aggregate': {'alias': '도서', 'name': 'Book'}, 'enumerations': [{'alias': '도서 상태', 'name': 'BookStatus'}, {'alias': '도서 카테고리', 'name': 'BookCategory'}], 'previewAttributes': ['book_id', 'title', 'isbn', 'author', 'publisher', 'registration_date', 'disposal_date', 'disposal_reason', 'created_at', 'updated_at', 'history_id', 'change_reason', 'changed_by', 'change_date'], 'valueObjects': [{'alias': '도서 상세정보', 'name': 'BookSpecification', 'referencedAggregateName': ''}, {'alias': '대출 참조', 'name': 'LoanReference', 'referencedAggregate': {'alias': '대출', 'name': 'Loan'}}, {'alias': '예약 참조', 'name': 'ReservationReference', 'referencedAggregate': {'alias': '예약', 'name': 'Reservation'}}, {'alias': '도서 상태 변경 이력', 'name': 'BookStatusHistory', 'referencedAggregateName': ''}]}]}, 'LoanProcess': {'boundedContext': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LoanProcess (대출/반납 프로세스)\n\n## Role\n회원의 도서 대출, 반납, 연장, 예약 등 대출/반납과 관련된 모든 프로세스를 관리한다. 회원 인증, 대출 기간 선택, 도서 검색, 예약 처리, 연장 및 반납 시 상태 변경 등 대출 흐름 전반을 담당한다.\n\n## Key Events\n- BookLent\n- BookReserved\n- BookReturned\n- LoanExtended\n- MemberVerified\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수\n\n## DDL\n\n```sql\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date\n```\n```sql\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date\n```\n```sql\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date\n```\n```sql\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days\n```\n## Event\n\n{\n  "name": "BookLent",\n  "displayName": "도서 대출됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 회원 인증 및 도서 상태 확인 후 대출이 완료됨. 도서 상태가 \'대출중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서 식별자",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 기록 생성",\n    "도서 상태 \'대출중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        15\n      ],\n      [\n        5,\n        238\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "대출 중인 도서에 대해 회원이 예약을 신청함. 예약이 완료되면 도서 상태가 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "예약 기록 생성",\n    "도서 상태 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReservationHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        161\n      ],\n      [\n        5,\n        196\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출한 도서를 반납함. 반납 시 도서 상태가 \'대출가능\' 또는 예약자가 있을 경우 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "반납 기록 생성",\n    "도서 상태 변경"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReturnHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 중인 도서의 대출 기간을 연장함. 연장 시 대출 기록과 반납 예정일이 갱신됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자",\n    "연장 기간"\n  ],\n  "outputs": [\n    "대출 기록 갱신",\n    "반납 예정일 변경"\n  ],\n  "nextEvents": [\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        99\n      ],\n      [\n        7,\n        127\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "MemberVerified",\n  "displayName": "회원 인증됨",\n  "actor": "System",\n  "level": 11,\n  "description": "도서 대출/예약 시 회원번호와 이름으로 회원의 유효성을 시스템이 검증함.",\n  "inputs": [\n    "회원번호",\n    "이름"\n  ],\n  "outputs": [\n    "회원 인증 결과"\n  ],\n  "nextEvents": [\n    "BookLent",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        49\n      ],\n      [\n        5,\n        77\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: receives from 도서 관리 (BookManagement)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### LoanProcess-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 대출, 예약, 반납 등 이벤트 발생 시 이력 컨텍스트가 이를 구독하여 기록 및 조회 기능을 제공함.\n- **Interaction Pattern**: 대출/반납 프로세스에서 대출/예약/반납 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 이력 데이터를 기록한다.', 'id': '55a3a470-5c49-41cf-9f81-62dc92e1f0e4', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': '55a3a470-5c49-41cf-9f81-62dc92e1f0e4', 'style': '{}', 'width': 560, 'x': 1185.0, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': '55a3a470-5c49-41cf-9f81-62dc92e1f0e4', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LoanProcess', 'traceName': 'LoanProcess', 'displayName': '대출/반납 프로세스', 'oldName': '', 'policies': [], 'portGenerated': 8081, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_d9714d920648e6f9bf12d149e324d15b', 'requirements': {'ddl': "CREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM('대출중', '연체', '반납완료', '연장') DEFAULT '대출중',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('예약중', '예약완료', '예약취소', '예약만료') DEFAULT '예약중',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM('대출', '반납', '연장', '연체알림', '분실신고') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days", 'ddlFields': [{'fieldName': 'loan_id', 'refs': [[[2, 5], [2, 30]], [[37, 5], [37, 24]], [[50, 5], [50, 24]]]}, {'fieldName': 'member_id', 'refs': [[[3, 5], [3, 34]], [[21, 5], [21, 34]]]}, {'fieldName': 'book_id', 'refs': [[[4, 5], [4, 24]], [[22, 5], [22, 24]]]}, {'fieldName': 'loan_date', 'refs': [[[5, 5], [5, 48]]]}, {'fieldName': 'due_date', 'refs': [[[6, 5], [6, 30]]]}, {'fieldName': 'return_date', 'refs': [[[7, 5], [7, 29]]]}, {'fieldName': 'loan_period_days', 'refs': [[[8, 5], [8, 57]]]}, {'fieldName': 'status', 'refs': [[[9, 5], [9, 50]], [[24, 5], [24, 54]]]}, {'fieldName': 'extension_count', 'refs': [[[10, 5], [10, 33]]]}, {'fieldName': 'created_at', 'refs': [[[11, 5], [11, 49]], [[27, 5], [27, 49]], [[56, 5], [56, 49]]]}, {'fieldName': 'updated_at', 'refs': [[[12, 5], [12, 77]], [[28, 5], [28, 77]], [[57, 5], [57, 77]]]}, {'fieldName': 'reservation_id', 'refs': [[[20, 5], [20, 37]]]}, {'fieldName': 'reservation_date', 'refs': [[[23, 5], [23, 55]]]}, {'fieldName': 'notification_sent', 'refs': [[[25, 5], [25, 43]]]}, {'fieldName': 'expiry_date', 'refs': [[[26, 5], [26, 29]]]}, {'fieldName': 'history_id', 'refs': [[[36, 5], [36, 33]]]}, {'fieldName': 'action_type', 'refs': [[[38, 5], [38, 63]]]}, {'fieldName': 'action_date', 'refs': [[[39, 5], [39, 50]]]}, {'fieldName': 'previous_due_date', 'refs': [[[40, 5], [40, 35]]]}, {'fieldName': 'new_due_date', 'refs': [[[41, 5], [41, 30]]]}, {'fieldName': 'notes', 'refs': [[[42, 5], [42, 14]]]}, {'fieldName': 'processed_by', 'refs': [[[43, 5], [43, 29]]]}, {'fieldName': 'overdue_id', 'refs': [[[49, 5], [49, 33]]]}, {'fieldName': 'overdue_days', 'refs': [[[51, 5], [51, 29]]]}, {'fieldName': 'fine_amount', 'refs': [[[52, 5], [52, 42]]]}, {'fieldName': 'fine_paid', 'refs': [[[53, 5], [53, 35]]]}, {'fieldName': 'notification_count', 'refs': [[[54, 5], [54, 36]]]}, {'fieldName': 'last_notification_date', 'refs': [[[55, 5], [55, 40]]]}], 'description': '# Bounded Context Overview: LoanProcess (대출/반납 프로세스)\n\n## Role\n회원의 도서 대출, 반납, 연장, 예약 등 대출/반납과 관련된 모든 프로세스를 관리한다. 회원 인증, 대출 기간 선택, 도서 검색, 예약 처리, 연장 및 반납 시 상태 변경 등 대출 흐름 전반을 담당한다.\n\n## Key Events\n- BookLent\n- BookReserved\n- BookReturned\n- LoanExtended\n- MemberVerified\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수\n\n## DDL\n\n```sql\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date\n```\n```sql\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date\n```\n```sql\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date\n```\n```sql\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days\n```\n## Event\n\n{\n  "name": "BookLent",\n  "displayName": "도서 대출됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 회원 인증 및 도서 상태 확인 후 대출이 완료됨. 도서 상태가 \'대출중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서 식별자",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 기록 생성",\n    "도서 상태 \'대출중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        15\n      ],\n      [\n        5,\n        238\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "대출 중인 도서에 대해 회원이 예약을 신청함. 예약이 완료되면 도서 상태가 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "예약 기록 생성",\n    "도서 상태 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReservationHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        161\n      ],\n      [\n        5,\n        196\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출한 도서를 반납함. 반납 시 도서 상태가 \'대출가능\' 또는 예약자가 있을 경우 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "반납 기록 생성",\n    "도서 상태 변경"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReturnHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 중인 도서의 대출 기간을 연장함. 연장 시 대출 기록과 반납 예정일이 갱신됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자",\n    "연장 기간"\n  ],\n  "outputs": [\n    "대출 기록 갱신",\n    "반납 예정일 변경"\n  ],\n  "nextEvents": [\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        99\n      ],\n      [\n        7,\n        127\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "MemberVerified",\n  "displayName": "회원 인증됨",\n  "actor": "System",\n  "level": 11,\n  "description": "도서 대출/예약 시 회원번호와 이름으로 회원의 유효성을 시스템이 검증함.",\n  "inputs": [\n    "회원번호",\n    "이름"\n  ],\n  "outputs": [\n    "회원 인증 결과"\n  ],\n  "nextEvents": [\n    "BookLent",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        49\n      ],\n      [\n        5,\n        77\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: receives from 도서 관리 (BookManagement)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### LoanProcess-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 대출, 예약, 반납 등 이벤트 발생 시 이력 컨텍스트가 이를 구독하여 기록 및 조회 기능을 제공함.\n- **Interaction Pattern**: 대출/반납 프로세스에서 대출/예약/반납 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 이력 데이터를 기록한다.', 'event': '{\n  "name": "BookLent",\n  "displayName": "도서 대출됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 회원 인증 및 도서 상태 확인 후 대출이 완료됨. 도서 상태가 \'대출중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서 식별자",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 기록 생성",\n    "도서 상태 \'대출중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        15\n      ],\n      [\n        5,\n        238\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "대출 중인 도서에 대해 회원이 예약을 신청함. 예약이 완료되면 도서 상태가 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "예약 기록 생성",\n    "도서 상태 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReservationHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        161\n      ],\n      [\n        5,\n        196\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출한 도서를 반납함. 반납 시 도서 상태가 \'대출가능\' 또는 예약자가 있을 경우 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "반납 기록 생성",\n    "도서 상태 변경"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReturnHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 중인 도서의 대출 기간을 연장함. 연장 시 대출 기록과 반납 예정일이 갱신됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자",\n    "연장 기간"\n  ],\n  "outputs": [\n    "대출 기록 갱신",\n    "반납 예정일 변경"\n  ],\n  "nextEvents": [\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        99\n      ],\n      [\n        7,\n        127\n      ]\n    ]\n  ]\n}\n{\n  "name": "MemberVerified",\n  "displayName": "회원 인증됨",\n  "actor": "System",\n  "level": 11,\n  "description": "도서 대출/예약 시 회원번호와 이름으로 회원의 유효성을 시스템이 검증함.",\n  "inputs": [\n    "회원번호",\n    "이름"\n  ],\n  "outputs": [\n    "회원 인증 결과"\n  ],\n  "nextEvents": [\n    "BookLent",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        49\n      ],\n      [\n        5,\n        77\n      ]\n    ]\n  ]\n}', 'eventNames': 'BookLent, BookReserved, BookReturned, LoanExtended, MemberVerified 이벤트가 발생할 수 있어.', 'userStory': "'대출/반납' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 '대출가능'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수"}}, 'cons': {'cohesion': '연체, 벌금 등 대출 후속 프로세스가 Loan Aggregate에 집중되어 책임이 다소 확장될 수 있다.', 'complexity': '연체, 벌금 등 다양한 상태와 이벤트를 Loan에서 모두 처리하면 도메인 모델이 점차 복잡해질 수 있다.', 'consistency': '연체/벌금 등 복잡한 상태 전이 시 트랜잭션 경계가 커질 수 있다.', 'coupling': '연체/벌금 관리 등 확장 시 Loan에 추가적인 책임이 부여되어 Aggregate가 비대해질 수 있다.', 'encapsulation': '대출과 연체/벌금 로직이 혼재될 경우 도메인 규칙이 복잡해질 수 있다.', 'independence': '연체/벌금 정책 변경 시 Loan Aggregate 전체에 영향을 줄 수 있다.', 'performance': '대출 데이터가 많아질수록 단일 Loan Aggregate에 대한 쓰기/조회 부하가 증가할 수 있다.'}, 'description': '# Bounded Context Overview: LoanProcess (대출/반납 프로세스)\n\n## Role\n회원의 도서 대출, 반납, 연장, 예약 등 대출/반납과 관련된 모든 프로세스를 관리한다. 회원 인증, 대출 기간 선택, 도서 검색, 예약 처리, 연장 및 반납 시 상태 변경 등 대출 흐름 전반을 담당한다.\n\n## Key Events\n- BookLent\n- BookReserved\n- BookReturned\n- LoanExtended\n- MemberVerified\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수\n\n## DDL\n\n```sql\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date\n```\n```sql\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date\n```\n```sql\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date\n```\n```sql\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days\n```\n## Event\n\n{\n  "name": "BookLent",\n  "displayName": "도서 대출됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 회원 인증 및 도서 상태 확인 후 대출이 완료됨. 도서 상태가 \'대출중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서 식별자",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 기록 생성",\n    "도서 상태 \'대출중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        15\n      ],\n      [\n        5,\n        238\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "대출 중인 도서에 대해 회원이 예약을 신청함. 예약이 완료되면 도서 상태가 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "예약 기록 생성",\n    "도서 상태 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReservationHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        161\n      ],\n      [\n        5,\n        196\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출한 도서를 반납함. 반납 시 도서 상태가 \'대출가능\' 또는 예약자가 있을 경우 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "반납 기록 생성",\n    "도서 상태 변경"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReturnHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 중인 도서의 대출 기간을 연장함. 연장 시 대출 기록과 반납 예정일이 갱신됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자",\n    "연장 기간"\n  ],\n  "outputs": [\n    "대출 기록 갱신",\n    "반납 예정일 변경"\n  ],\n  "nextEvents": [\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        99\n      ],\n      [\n        7,\n        127\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "MemberVerified",\n  "displayName": "회원 인증됨",\n  "actor": "System",\n  "level": 11,\n  "description": "도서 대출/예약 시 회원번호와 이름으로 회원의 유효성을 시스템이 검증함.",\n  "inputs": [\n    "회원번호",\n    "이름"\n  ],\n  "outputs": [\n    "회원 인증 결과"\n  ],\n  "nextEvents": [\n    "BookLent",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        49\n      ],\n      [\n        5,\n        77\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: receives from 도서 관리 (BookManagement)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### LoanProcess-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 대출, 예약, 반납 등 이벤트 발생 시 이력 컨텍스트가 이를 구독하여 기록 및 조회 기능을 제공함.\n- **Interaction Pattern**: 대출/반납 프로세스에서 대출/예약/반납 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 이력 데이터를 기록한다.', 'isAIRecommended': False, 'pros': {'cohesion': '대출과 예약 각각의 비즈니스 규칙과 상태 전이가 각 Aggregate에 명확히 집중되어 있어 도메인 책임이 분명하다.', 'complexity': 'Aggregate 수가 적어 구현 및 유지보수가 단순하며, 도메인 모델의 이해가 쉽다.', 'consistency': '대출/예약 처리와 상태 변경이 각각의 트랜잭션 경계 내에서 원자적으로 보장된다.', 'coupling': 'Book, BookCategory 등 외부 Aggregate는 ValueObject 참조로만 연결되어 느슨한 결합을 유지한다.', 'encapsulation': '대출/예약의 상태, 연장, 반납, 예약취소 등 주요 로직이 Aggregate 내부에 캡슐화되어 외부 노출이 최소화된다.', 'independence': '대출과 예약의 변경이 서로 독립적으로 이루어져 각자의 정책 변경에 유연하게 대응할 수 있다.', 'performance': '대출/예약 현황 조회, 상태 변경 등 주요 연산이 단일 Aggregate 내에서 빠르게 처리된다.'}, 'structure': [{'aggregate': {'alias': '대출', 'name': 'Loan'}, 'enumerations': [{'alias': '대출 상태', 'name': 'LoanStatus'}], 'previewAttributes': ['loan_id', 'member_id', 'book_id', 'loan_date', 'due_date', 'return_date', 'loan_period_days', 'status', 'extension_count', 'created_at', 'updated_at', 'history_id', 'action_type', 'action_date', 'previous_due_date', 'new_due_date', 'notes', 'processed_by', 'overdue_id', 'overdue_days', 'fine_amount', 'fine_paid', 'notification_count', 'last_notification_date'], 'valueObjects': [{'alias': '도서 참조', 'name': 'BookReference', 'referencedAggregate': {'alias': '도서', 'name': 'Book'}}, {'alias': '회원', 'name': 'Member', 'referencedAggregateName': ''}]}, {'aggregate': {'alias': '예약', 'name': 'Reservation'}, 'enumerations': [{'alias': '예약 상태', 'name': 'ReservationStatus'}], 'previewAttributes': ['reservation_id', 'member_id', 'book_id', 'reservation_date', 'status', 'notification_sent', 'expiry_date', 'created_at', 'updated_at'], 'valueObjects': [{'alias': '도서 참조', 'name': 'BookReference', 'referencedAggregate': {'alias': '도서', 'name': 'Book'}}, {'alias': '회원', 'name': 'Member', 'referencedAggregateName': ''}]}]}}, userInfo=UserInfoModel(uid='EYCl46CwWAWvpz2E1BCUpVgPIpa2', authorized='admin', consultingTime=0, email='shinseongjin@uengine.org', name='shinseongjin@uengine.org', profile='https://avatars.githubusercontent.com/u/163972132?v=4', providerUid='163972132', savedCoin=0, savedToolTime=0), information=InformationModel(projectId='163972132_es_d9714d920648e6f9bf12d149e324d15b', author='EYCl46CwWAWvpz2E1BCUpVgPIpa2', authorEmail='shinseongjin@uengine.org', comment='', createdTimeStamp=1755660124994, lastModifiedTimeStamp=1755660124994, projectName='untitled', type='es'), llmModel=LLMModel(model_vendor='openai', model_name='gpt-4.1-2025-04-14', model_kwargs={}, model_max_input_limit=962429, api_key=''), preferedLanguage='Korean', jobId='a4a87622-8da7-fe72-8121-930cf0440e54'), subgraphs=SubgraphsModel(createAggregateByFunctionsModel=CreateAggregateByFunctionsModel(current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False, ddl_extraction_complete=False, ddl_assignment_complete=False, all_ddl_fields=[]), createAggregateClassIdByDraftsModel=CreateAggregateClassIdByDraftsModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createCommandActionsByFunctionModel=CreateCommandActionsByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False, assign_event_names_complete=False), createPolicyActionsByFunctionModel=CreatePolicyActionsByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createGwtGeneratorByFunctionModel=CreateGwtGeneratorByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), esValueSummaryGeneratorModel=ESValueSummaryGeneratorModel(is_processing=False, is_complete=False, is_failed=False, context='', keys_to_filter=[], max_tokens=0, token_calc_model_vendor='', token_calc_model_name='', summarized_es_value={}, processed_summarized_es_value={}, element_ids=[], sorted_element_ids=[], retry_count=0, max_retry_count=3)), outputs=OutputsModel(esValue=EsValueModel(elements={'c6dc75f2-e219-44ad-904e-da2c1b32daab': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: BookManagement (도서 관리)\n\n## Role\n도서 등록, 상태 관리, 폐기 등 도서의 전체 라이프사이클을 관리한다. 도서 등록 시 ISBN 중복 및 유효성 검증, 카테고리 선택, 상태 변경(대출가능/대출중/예약중/폐기) 등 도서의 상태와 관련된 모든 비즈니스 규칙을 담당한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStatusChanged\n\n# Requirements\n\n## userStory\n\n도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해\n\n등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해\n\n## DDL\n\n```sql\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n```\n```sql\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n```\n## Event\n\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 새로운 도서를 등록하여 도서관 시스템에 추가하였음. 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받고, ISBN 중복 및 유효성 검증을 완료함.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)"\n  ],\n  "outputs": [\n    "신규 도서가 \'대출가능\' 상태로 등록됨"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        1\n      ],\n      [\n        3,\n        48\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "도서 상태 변경 트리거(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "도서 상태(대출가능, 대출중, 예약중, 폐기 등)"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "BookLent",\n    "BookReturned",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        172\n      ],\n      [\n        3,\n        244\n      ]\n    ],\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 훼손 또는 분실되어 사서에 의해 폐기 처리됨. 폐기된 도서는 더 이상 대출이 불가능함.",\n  "inputs": [\n    "도서 식별자",\n    "폐기 사유(훼손/분실 등)"\n  ],\n  "outputs": [\n    "도서 상태가 \'폐기\'로 변경됨"\n  ],\n  "nextEvents": [],\n  "refs": [\n    [\n      [\n        3,\n        246\n      ],\n      [\n        3,\n        305\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/반납 프로세스 (LoanProcess)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### BookManagement-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 도서 상태 변경 이력도 이력 컨텍스트에서 관리해야 하므로, 도서 관리에서 상태 변경 이벤트를 발행하면 이력 컨텍스트가 이를 구독하여 기록한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 상태 변경 이력을 기록한다.', 'id': 'c6dc75f2-e219-44ad-904e-da2c1b32daab', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': 'c6dc75f2-e219-44ad-904e-da2c1b32daab', 'style': '{}', 'width': 560, 'x': 600, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': 'c6dc75f2-e219-44ad-904e-da2c1b32daab', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'BookManagement', 'traceName': 'BookManagement', 'displayName': '도서 관리', 'oldName': '', 'policies': [], 'portGenerated': 8080, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_d9714d920648e6f9bf12d149e324d15b', 'requirements': {'ddl': "CREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM('소설', '비소설', '학술', '잡지') NOT NULL,\n    status ENUM('대출가능', '대출중', '예약중', '폐기') DEFAULT '대출가능',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM('대출가능', '대출중', '예약중', '폐기'),\n    new_status ENUM('대출가능', '대출중', '예약중', '폐기') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)", 'ddlFields': [{'fieldName': 'book_id', 'refs': [[[2, 5], [2, 30]], [[20, 5], [20, 24]]]}, {'fieldName': 'title', 'refs': [[[3, 5], [3, 31]]]}, {'fieldName': 'isbn', 'refs': [[[4, 5], [4, 36]]]}, {'fieldName': 'author', 'refs': [[[5, 5], [5, 32]]]}, {'fieldName': 'publisher', 'refs': [[[6, 5], [6, 35]]]}, {'fieldName': 'registration_date', 'refs': [[[9, 5], [9, 56]]]}, {'fieldName': 'disposal_date', 'refs': [[[10, 5], [10, 31]]]}, {'fieldName': 'disposal_reason', 'refs': [[[11, 5], [11, 29]]]}, {'fieldName': 'created_at', 'refs': [[[12, 5], [12, 49]]]}, {'fieldName': 'updated_at', 'refs': [[[13, 5], [13, 77]]]}, {'fieldName': 'history_id', 'refs': [[[19, 5], [19, 33]]]}, {'fieldName': 'change_reason', 'refs': [[[23, 5], [23, 30]]]}, {'fieldName': 'changed_by', 'refs': [[[24, 5], [24, 27]]]}, {'fieldName': 'change_date', 'refs': [[[25, 5], [25, 50]]]}], 'description': '# Bounded Context Overview: BookManagement (도서 관리)\n\n## Role\n도서 등록, 상태 관리, 폐기 등 도서의 전체 라이프사이클을 관리한다. 도서 등록 시 ISBN 중복 및 유효성 검증, 카테고리 선택, 상태 변경(대출가능/대출중/예약중/폐기) 등 도서의 상태와 관련된 모든 비즈니스 규칙을 담당한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStatusChanged\n\n# Requirements\n\n## userStory\n\n도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해\n\n등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해\n\n## DDL\n\n```sql\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n```\n```sql\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n```\n## Event\n\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 새로운 도서를 등록하여 도서관 시스템에 추가하였음. 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받고, ISBN 중복 및 유효성 검증을 완료함.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)"\n  ],\n  "outputs": [\n    "신규 도서가 \'대출가능\' 상태로 등록됨"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        1\n      ],\n      [\n        3,\n        48\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "도서 상태 변경 트리거(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "도서 상태(대출가능, 대출중, 예약중, 폐기 등)"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "BookLent",\n    "BookReturned",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        172\n      ],\n      [\n        3,\n        244\n      ]\n    ],\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 훼손 또는 분실되어 사서에 의해 폐기 처리됨. 폐기된 도서는 더 이상 대출이 불가능함.",\n  "inputs": [\n    "도서 식별자",\n    "폐기 사유(훼손/분실 등)"\n  ],\n  "outputs": [\n    "도서 상태가 \'폐기\'로 변경됨"\n  ],\n  "nextEvents": [],\n  "refs": [\n    [\n      [\n        3,\n        246\n      ],\n      [\n        3,\n        305\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/반납 프로세스 (LoanProcess)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### BookManagement-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 도서 상태 변경 이력도 이력 컨텍스트에서 관리해야 하므로, 도서 관리에서 상태 변경 이벤트를 발행하면 이력 컨텍스트가 이를 구독하여 기록한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 상태 변경 이력을 기록한다.', 'event': '{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 새로운 도서를 등록하여 도서관 시스템에 추가하였음. 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받고, ISBN 중복 및 유효성 검증을 완료함.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)"\n  ],\n  "outputs": [\n    "신규 도서가 \'대출가능\' 상태로 등록됨"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        1\n      ],\n      [\n        3,\n        48\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "도서 상태 변경 트리거(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "도서 상태(대출가능, 대출중, 예약중, 폐기 등)"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "BookLent",\n    "BookReturned",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        3,\n        172\n      ],\n      [\n        3,\n        244\n      ]\n    ],\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 훼손 또는 분실되어 사서에 의해 폐기 처리됨. 폐기된 도서는 더 이상 대출이 불가능함.",\n  "inputs": [\n    "도서 식별자",\n    "폐기 사유(훼손/분실 등)"\n  ],\n  "outputs": [\n    "도서 상태가 \'폐기\'로 변경됨"\n  ],\n  "nextEvents": [],\n  "refs": [\n    [\n      [\n        3,\n        246\n      ],\n      [\n        3,\n        305\n      ]\n    ]\n  ]\n}', 'eventNames': 'BookRegistered, BookDisposed, BookStatusChanged 이벤트가 발생할 수 있어.', 'userStory': "도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해\n등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해"}}, '55a3a470-5c49-41cf-9f81-62dc92e1f0e4': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LoanProcess (대출/반납 프로세스)\n\n## Role\n회원의 도서 대출, 반납, 연장, 예약 등 대출/반납과 관련된 모든 프로세스를 관리한다. 회원 인증, 대출 기간 선택, 도서 검색, 예약 처리, 연장 및 반납 시 상태 변경 등 대출 흐름 전반을 담당한다.\n\n## Key Events\n- BookLent\n- BookReserved\n- BookReturned\n- LoanExtended\n- MemberVerified\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수\n\n## DDL\n\n```sql\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date\n```\n```sql\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date\n```\n```sql\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date\n```\n```sql\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days\n```\n## Event\n\n{\n  "name": "BookLent",\n  "displayName": "도서 대출됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 회원 인증 및 도서 상태 확인 후 대출이 완료됨. 도서 상태가 \'대출중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서 식별자",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 기록 생성",\n    "도서 상태 \'대출중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        15\n      ],\n      [\n        5,\n        238\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "대출 중인 도서에 대해 회원이 예약을 신청함. 예약이 완료되면 도서 상태가 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "예약 기록 생성",\n    "도서 상태 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReservationHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        161\n      ],\n      [\n        5,\n        196\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출한 도서를 반납함. 반납 시 도서 상태가 \'대출가능\' 또는 예약자가 있을 경우 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "반납 기록 생성",\n    "도서 상태 변경"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReturnHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 중인 도서의 대출 기간을 연장함. 연장 시 대출 기록과 반납 예정일이 갱신됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자",\n    "연장 기간"\n  ],\n  "outputs": [\n    "대출 기록 갱신",\n    "반납 예정일 변경"\n  ],\n  "nextEvents": [\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        99\n      ],\n      [\n        7,\n        127\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "MemberVerified",\n  "displayName": "회원 인증됨",\n  "actor": "System",\n  "level": 11,\n  "description": "도서 대출/예약 시 회원번호와 이름으로 회원의 유효성을 시스템이 검증함.",\n  "inputs": [\n    "회원번호",\n    "이름"\n  ],\n  "outputs": [\n    "회원 인증 결과"\n  ],\n  "nextEvents": [\n    "BookLent",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        49\n      ],\n      [\n        5,\n        77\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: receives from 도서 관리 (BookManagement)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### LoanProcess-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 대출, 예약, 반납 등 이벤트 발생 시 이력 컨텍스트가 이를 구독하여 기록 및 조회 기능을 제공함.\n- **Interaction Pattern**: 대출/반납 프로세스에서 대출/예약/반납 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 이력 데이터를 기록한다.', 'id': '55a3a470-5c49-41cf-9f81-62dc92e1f0e4', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': '55a3a470-5c49-41cf-9f81-62dc92e1f0e4', 'style': '{}', 'width': 560, 'x': 1185.0, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': '55a3a470-5c49-41cf-9f81-62dc92e1f0e4', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LoanProcess', 'traceName': 'LoanProcess', 'displayName': '대출/반납 프로세스', 'oldName': '', 'policies': [], 'portGenerated': 8081, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_d9714d920648e6f9bf12d149e324d15b', 'requirements': {'ddl': "CREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM('대출중', '연체', '반납완료', '연장') DEFAULT '대출중',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('예약중', '예약완료', '예약취소', '예약만료') DEFAULT '예약중',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM('대출', '반납', '연장', '연체알림', '분실신고') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days", 'ddlFields': [{'fieldName': 'loan_id', 'refs': [[[2, 5], [2, 30]], [[37, 5], [37, 24]], [[50, 5], [50, 24]]]}, {'fieldName': 'member_id', 'refs': [[[3, 5], [3, 34]], [[21, 5], [21, 34]]]}, {'fieldName': 'book_id', 'refs': [[[4, 5], [4, 24]], [[22, 5], [22, 24]]]}, {'fieldName': 'loan_date', 'refs': [[[5, 5], [5, 48]]]}, {'fieldName': 'due_date', 'refs': [[[6, 5], [6, 30]]]}, {'fieldName': 'return_date', 'refs': [[[7, 5], [7, 29]]]}, {'fieldName': 'loan_period_days', 'refs': [[[8, 5], [8, 57]]]}, {'fieldName': 'status', 'refs': [[[9, 5], [9, 50]], [[24, 5], [24, 54]]]}, {'fieldName': 'extension_count', 'refs': [[[10, 5], [10, 33]]]}, {'fieldName': 'created_at', 'refs': [[[11, 5], [11, 49]], [[27, 5], [27, 49]], [[56, 5], [56, 49]]]}, {'fieldName': 'updated_at', 'refs': [[[12, 5], [12, 77]], [[28, 5], [28, 77]], [[57, 5], [57, 77]]]}, {'fieldName': 'reservation_id', 'refs': [[[20, 5], [20, 37]]]}, {'fieldName': 'reservation_date', 'refs': [[[23, 5], [23, 55]]]}, {'fieldName': 'notification_sent', 'refs': [[[25, 5], [25, 43]]]}, {'fieldName': 'expiry_date', 'refs': [[[26, 5], [26, 29]]]}, {'fieldName': 'history_id', 'refs': [[[36, 5], [36, 33]]]}, {'fieldName': 'action_type', 'refs': [[[38, 5], [38, 63]]]}, {'fieldName': 'action_date', 'refs': [[[39, 5], [39, 50]]]}, {'fieldName': 'previous_due_date', 'refs': [[[40, 5], [40, 35]]]}, {'fieldName': 'new_due_date', 'refs': [[[41, 5], [41, 30]]]}, {'fieldName': 'notes', 'refs': [[[42, 5], [42, 14]]]}, {'fieldName': 'processed_by', 'refs': [[[43, 5], [43, 29]]]}, {'fieldName': 'overdue_id', 'refs': [[[49, 5], [49, 33]]]}, {'fieldName': 'overdue_days', 'refs': [[[51, 5], [51, 29]]]}, {'fieldName': 'fine_amount', 'refs': [[[52, 5], [52, 42]]]}, {'fieldName': 'fine_paid', 'refs': [[[53, 5], [53, 35]]]}, {'fieldName': 'notification_count', 'refs': [[[54, 5], [54, 36]]]}, {'fieldName': 'last_notification_date', 'refs': [[[55, 5], [55, 40]]]}], 'description': '# Bounded Context Overview: LoanProcess (대출/반납 프로세스)\n\n## Role\n회원의 도서 대출, 반납, 연장, 예약 등 대출/반납과 관련된 모든 프로세스를 관리한다. 회원 인증, 대출 기간 선택, 도서 검색, 예약 처리, 연장 및 반납 시 상태 변경 등 대출 흐름 전반을 담당한다.\n\n## Key Events\n- BookLent\n- BookReserved\n- BookReturned\n- LoanExtended\n- MemberVerified\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수\n\n## DDL\n\n```sql\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date\n```\n```sql\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date\n```\n```sql\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date\n```\n```sql\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days\n```\n## Event\n\n{\n  "name": "BookLent",\n  "displayName": "도서 대출됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 회원 인증 및 도서 상태 확인 후 대출이 완료됨. 도서 상태가 \'대출중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서 식별자",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 기록 생성",\n    "도서 상태 \'대출중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        15\n      ],\n      [\n        5,\n        238\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "대출 중인 도서에 대해 회원이 예약을 신청함. 예약이 완료되면 도서 상태가 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "예약 기록 생성",\n    "도서 상태 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReservationHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        161\n      ],\n      [\n        5,\n        196\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출한 도서를 반납함. 반납 시 도서 상태가 \'대출가능\' 또는 예약자가 있을 경우 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "반납 기록 생성",\n    "도서 상태 변경"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReturnHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 중인 도서의 대출 기간을 연장함. 연장 시 대출 기록과 반납 예정일이 갱신됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자",\n    "연장 기간"\n  ],\n  "outputs": [\n    "대출 기록 갱신",\n    "반납 예정일 변경"\n  ],\n  "nextEvents": [\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        99\n      ],\n      [\n        7,\n        127\n      ]\n    ]\n  ]\n}\n\n{\n  "name": "MemberVerified",\n  "displayName": "회원 인증됨",\n  "actor": "System",\n  "level": 11,\n  "description": "도서 대출/예약 시 회원번호와 이름으로 회원의 유효성을 시스템이 검증함.",\n  "inputs": [\n    "회원번호",\n    "이름"\n  ],\n  "outputs": [\n    "회원 인증 결과"\n  ],\n  "nextEvents": [\n    "BookLent",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        49\n      ],\n      [\n        5,\n        77\n      ]\n    ]\n  ]\n}\n\n## Context Relations\n\n### BookManagement-LoanProcess\n- **Type**: Pub/Sub\n- **Direction**: receives from 도서 관리 (BookManagement)\n- **Reason**: 도서 상태 변경 등 주요 이벤트가 발생하면 대출/반납 프로세스에서 이를 구독하여 대출 가능 여부, 예약 처리 등에 반영할 수 있도록 느슨하게 연결함.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변경 이벤트를 발행하면, 대출/반납 프로세스가 이를 구독하여 대출/예약 처리에 반영한다.\n\n### LoanProcess-LoanHistory\n- **Type**: Pub/Sub\n- **Direction**: sends to 대출/예약/반납 이력 (LoanHistory)\n- **Reason**: 대출, 예약, 반납 등 이벤트 발생 시 이력 컨텍스트가 이를 구독하여 기록 및 조회 기능을 제공함.\n- **Interaction Pattern**: 대출/반납 프로세스에서 대출/예약/반납 이벤트가 발생하면, 이력 컨텍스트가 이를 구독하여 이력 데이터를 기록한다.', 'event': '{\n  "name": "BookLent",\n  "displayName": "도서 대출됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 회원 인증 및 도서 상태 확인 후 대출이 완료됨. 도서 상태가 \'대출중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서 식별자",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 기록 생성",\n    "도서 상태 \'대출중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        15\n      ],\n      [\n        5,\n        238\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "대출 중인 도서에 대해 회원이 예약을 신청함. 예약이 완료되면 도서 상태가 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "예약 기록 생성",\n    "도서 상태 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReservationHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        161\n      ],\n      [\n        5,\n        196\n      ]\n    ]\n  ]\n}\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출한 도서를 반납함. 반납 시 도서 상태가 \'대출가능\' 또는 예약자가 있을 경우 \'예약중\'으로 변경됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자"\n  ],\n  "outputs": [\n    "반납 기록 생성",\n    "도서 상태 변경"\n  ],\n  "nextEvents": [\n    "BookStatusChanged",\n    "ReturnHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        129\n      ],\n      [\n        7,\n        170\n      ]\n    ],\n    [\n      [\n        7,\n        175\n      ],\n      [\n        7,\n        217\n      ]\n    ]\n  ]\n}\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 중인 도서의 대출 기간을 연장함. 연장 시 대출 기록과 반납 예정일이 갱신됨.",\n  "inputs": [\n    "회원번호",\n    "도서 식별자",\n    "연장 기간"\n  ],\n  "outputs": [\n    "대출 기록 갱신",\n    "반납 예정일 변경"\n  ],\n  "nextEvents": [\n    "LoanHistoryRecorded"\n  ],\n  "refs": [\n    [\n      [\n        7,\n        99\n      ],\n      [\n        7,\n        127\n      ]\n    ]\n  ]\n}\n{\n  "name": "MemberVerified",\n  "displayName": "회원 인증됨",\n  "actor": "System",\n  "level": 11,\n  "description": "도서 대출/예약 시 회원번호와 이름으로 회원의 유효성을 시스템이 검증함.",\n  "inputs": [\n    "회원번호",\n    "이름"\n  ],\n  "outputs": [\n    "회원 인증 결과"\n  ],\n  "nextEvents": [\n    "BookLent",\n    "BookReserved"\n  ],\n  "refs": [\n    [\n      [\n        5,\n        49\n      ],\n      [\n        5,\n        77\n      ]\n    ]\n  ]\n}', 'eventNames': 'BookLent, BookReserved, BookReturned, LoanExtended, MemberVerified 이벤트가 발생할 수 있어.', 'userStory': "'대출/반납' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 '대출가능'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수"}}}, relations={}), isCompleted=False, isFailed=False, logs=[LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message='[ROOT_GRAPH] Starting new event storming generation process'), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message='[ROOT_GRAPH] Starting bounded context creation process'), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message='[ROOT_GRAPH] Processing 2 bounded contexts for creation'), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message="[ROOT_GRAPH] Processing bounded context 1/2: 'BookManagement'"), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message="[ROOT_GRAPH] Creating new bounded context: 'BookManagement'"), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message="[ROOT_GRAPH] Successfully created bounded context: 'BookManagement' with ID: 'c6dc75f2-e219-44ad-904e-da2c1b32daab'"), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message="[ROOT_GRAPH] Processing bounded context 2/2: 'LoanProcess'"), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message="[ROOT_GRAPH] Creating new bounded context: 'LoanProcess'"), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message="[ROOT_GRAPH] Successfully created bounded context: 'LoanProcess' with ID: '55a3a470-5c49-41cf-9f81-62dc92e1f0e4'"), LogModel(created_at='2025-08-20T12:21:33.522221', level='info', message='[ROOT_GRAPH] Bounded context creation completed successfully.')], totalProgressCount=14, currentProgressCount=1, lastCompletedRootGraphNode=None, lastCompletedSubGraphNode=None))