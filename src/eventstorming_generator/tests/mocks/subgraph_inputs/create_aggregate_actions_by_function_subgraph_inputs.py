from ....models import *

create_aggregate_actions_by_function_subgraph_inputs = State(inputs=InputsModel(selectedDraftOptions={'LibraryBookManagement': {'boundedContext': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LibraryBookManagement (도서 관리)\n\n## Role\n도서 등록, 도서 정보 수정, 도서 폐기, 도서 상태 관리 및 상태 변경 이력 기록을 담당한다. ISBN 중복 검증, 카테고리 관리, 폐기 상태 처리 등 도서에 대한 라이프사이클과 상태 추적을 관리한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStateChanged\n- BookHistoryRecorded\n\n# Requirements\n\n## userStory\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 도서 정보를 입력하여 신규 도서를 등록함. ISBN은 13자리로, 중복이 없어야 함. 등록된 도서는 \'대출가능\' 상태가 됨.",\n  "inputs": [\n    "도서명",\n    "ISBN",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)",\n    "ISBN 중복 아님"\n  ],\n  "outputs": [\n    "신규 도서 정보",\n    "\'대출가능\' 상태"\n  ],\n  "nextEvents": [\n    "BookStateChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookStateChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 자동 또는 수동으로 변경됨. 상태는 대출가능/대출중/예약중/폐기 등으로 변할 수 있음.",\n  "inputs": [\n    "도서",\n    "상태 변경 조건(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "변경된 도서 상태"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "LoanStarted",\n    "BookReserved",\n    "LoanReturned"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 분실 또는 훼손으로 폐기 처리됨. 폐기된 도서는 대출 불가.",\n  "inputs": [\n    "도서",\n    "폐기 사유(훼손, 분실)"\n  ],\n  "outputs": [\n    "도서 상태: \'폐기\'"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookHistoryRecorded",\n  "displayName": "도서 이력 기록됨",\n  "actor": "System",\n  "level": 9,\n  "description": "도서의 모든 상태 변화, 대출/반납/예약/폐기 등의 이력을 기록함.",\n  "inputs": [\n    "도서",\n    "상태 변화, 대출/반납/예약/폐기 이벤트"\n  ],\n  "outputs": [\n    "이력 데이터 축적"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n```\n\n```sql\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: receives from 대출/예약 관리 (LoanAndReservation)\n- **Reason**: 대출, 반납, 예약, 연체 등 도서의 상태 변화가 발생할 때마다 도서 관리 컨텍스트에 변경 이벤트를 전달해 도서 상태 및 이력을 갱신한다. 두 컨텍스트의 결합도를 낮추고, 상태 동기화를 위해 Pub/Sub를 사용했다.\n- **Interaction Pattern**: 대출/예약 관리에서 도서 상태 변화 이벤트를 발행하고, 도서 관리가 이를 구독해 상태를 갱신하며 이력을 기록한다.', 'id': '01aef040-81b3-453f-98fe-fbd114469077', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': '01aef040-81b3-453f-98fe-fbd114469077', 'style': '{}', 'width': 560, 'x': 600, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': '01aef040-81b3-453f-98fe-fbd114469077', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LibraryBookManagement', 'displayName': '도서 관리', 'oldName': '', 'policies': [], 'portGenerated': 8080, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_613c878ea9e32c8caec2ce3815a728d6', 'requirements': {'ddl': "-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM('소설', '비소설', '학술', '잡지') NOT NULL,\n    status ENUM('대출가능', '대출중', '예약중', '폐기') DEFAULT '대출가능',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM('대출가능', '대출중', '예약중', '폐기'),\n    new_status ENUM('대출가능', '대출중', '예약중', '폐기') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);", 'ddlFields': ['book_id', 'title', 'isbn', 'author', 'publisher', 'category', 'status', 'registration_date', 'disposal_date', 'disposal_reason', 'created_at', 'updated_at', 'history_id', 'previous_status', 'new_status', 'change_reason', 'changed_by', 'change_date'], 'event': '{"name":"BookRegistered","displayName":"도서 등록됨","actor":"Librarian","level":1,"description":"사서가 도서 정보를 입력하여 신규 도서를 등록함. ISBN은 13자리로, 중복이 없어야 함. 등록된 도서는 \'대출가능\' 상태가 됨.","inputs":["도서명","ISBN","저자","출판사","카테고리(소설/비소설/학술/잡지)","ISBN 중복 아님"],"outputs":["신규 도서 정보","\'대출가능\' 상태"],"nextEvents":["BookStateChanged"]}\n{"name":"BookStateChanged","displayName":"도서 상태 변경됨","actor":"System","level":2,"description":"도서의 상태가 자동 또는 수동으로 변경됨. 상태는 대출가능/대출중/예약중/폐기 등으로 변할 수 있음.","inputs":["도서","상태 변경 조건(대출, 반납, 예약, 폐기 등)"],"outputs":["변경된 도서 상태"],"nextEvents":["BookDisposed","LoanStarted","BookReserved","LoanReturned"]}\n{"name":"BookDisposed","displayName":"도서 폐기됨","actor":"Librarian","level":3,"description":"도서가 분실 또는 훼손으로 폐기 처리됨. 폐기된 도서는 대출 불가.","inputs":["도서","폐기 사유(훼손, 분실)"],"outputs":["도서 상태: \'폐기\'"],"nextEvents":[]}\n{"name":"BookHistoryRecorded","displayName":"도서 이력 기록됨","actor":"System","level":9,"description":"도서의 모든 상태 변화, 대출/반납/예약/폐기 등의 이력을 기록함.","inputs":["도서","상태 변화, 대출/반납/예약/폐기 이벤트"],"outputs":["이력 데이터 축적"],"nextEvents":[]}', 'eventNames': 'BookRegistered, BookDisposed, BookStateChanged, BookHistoryRecorded 이벤트가 발생할 수 있어.', 'userStory': "'도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해."}}, 'cons': {'cohesion': '상태 이력 데이터가 많아질수록 Book Aggregate의 사이즈가 커져, 본질적으로 서로 다른 관심사(도서 관리, 이력 관리)가 혼재된다.', 'complexity': '아주 다양한 도서 시나리오(상태, 이력, 폐기 등)가 복잡하게 얽혀 Aggregate가 비대해질 수 있다.', 'consistency': '이력 데이터가 커질수록 트랜잭션 처리 시간이 길어져 대량 처리 시 성능 저하 우려가 있다.', 'coupling': '도서 변경 빈도가 높고 이력 기록이 많으면 Aggregate 락 경합이 발생할 수 있다.', 'encapsulation': '단일 Aggregate가 너무 많은 책임을 져서, 변경/확장 시 영향 범위가 커진다.', 'independence': '이력 데이터 증가 시 도서 관리와 이력 관리의 독립적 확장·배포가 어렵다.', 'performance': '이력 건수가 많을 때 도서 정보 단순 조회조차 무거워질 수 있다.'}, 'description': '# Bounded Context Overview: LibraryBookManagement (도서 관리)\n\n## Role\n도서 등록, 도서 정보 수정, 도서 폐기, 도서 상태 관리 및 상태 변경 이력 기록을 담당한다. ISBN 중복 검증, 카테고리 관리, 폐기 상태 처리 등 도서에 대한 라이프사이클과 상태 추적을 관리한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStateChanged\n- BookHistoryRecorded\n\n# Requirements\n\n## userStory\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 도서 정보를 입력하여 신규 도서를 등록함. ISBN은 13자리로, 중복이 없어야 함. 등록된 도서는 \'대출가능\' 상태가 됨.",\n  "inputs": [\n    "도서명",\n    "ISBN",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)",\n    "ISBN 중복 아님"\n  ],\n  "outputs": [\n    "신규 도서 정보",\n    "\'대출가능\' 상태"\n  ],\n  "nextEvents": [\n    "BookStateChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookStateChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 자동 또는 수동으로 변경됨. 상태는 대출가능/대출중/예약중/폐기 등으로 변할 수 있음.",\n  "inputs": [\n    "도서",\n    "상태 변경 조건(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "변경된 도서 상태"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "LoanStarted",\n    "BookReserved",\n    "LoanReturned"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 분실 또는 훼손으로 폐기 처리됨. 폐기된 도서는 대출 불가.",\n  "inputs": [\n    "도서",\n    "폐기 사유(훼손, 분실)"\n  ],\n  "outputs": [\n    "도서 상태: \'폐기\'"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookHistoryRecorded",\n  "displayName": "도서 이력 기록됨",\n  "actor": "System",\n  "level": 9,\n  "description": "도서의 모든 상태 변화, 대출/반납/예약/폐기 등의 이력을 기록함.",\n  "inputs": [\n    "도서",\n    "상태 변화, 대출/반납/예약/폐기 이벤트"\n  ],\n  "outputs": [\n    "이력 데이터 축적"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n```\n\n```sql\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: receives from 대출/예약 관리 (LoanAndReservation)\n- **Reason**: 대출, 반납, 예약, 연체 등 도서의 상태 변화가 발생할 때마다 도서 관리 컨텍스트에 변경 이벤트를 전달해 도서 상태 및 이력을 갱신한다. 두 컨텍스트의 결합도를 낮추고, 상태 동기화를 위해 Pub/Sub를 사용했다.\n- **Interaction Pattern**: 대출/예약 관리에서 도서 상태 변화 이벤트를 발행하고, 도서 관리가 이를 구독해 상태를 갱신하며 이력을 기록한다.', 'isAIRecommended': False, 'pros': {'cohesion': '도서 정보, 상태, 폐기 및 모든 상태 이력이 하나의 Aggregate에 집중되어 도서 라이프사이클 불변식을 강력하게 보장한다.', 'complexity': '단일 Aggregate 접근으로 도서 및 이력에 대한 쿼리·갱신 논리가 단순해진다.', 'consistency': '상태 변경, 폐기, 이력 기록 등 핵심 트랜잭션이 한 번에 원자적으로 처리된다.', 'coupling': 'Loan, Reservation Aggregate를 ValueObject로 참조함으로써 대출/예약 관리 컨텍스트와의 결합도를 낮춘다.', 'encapsulation': '도서의 전체 상태와 변경 내역을 한곳에서 관리하여, 도서 관리 규칙이 Aggregate 내부에 잘 은닉된다.', 'independence': '도서 도메인 변경이 다른 Aggregate에 영향을 거의 주지 않는다.', 'performance': '도서 상태 및 이력 질의 시 별도 조인이나 복잡한 연동 없이 빠르게 접근할 수 있다.'}, 'structure': [{'aggregate': {'alias': '도서', 'name': 'Book'}, 'enumerations': [{'alias': '도서 상태', 'name': 'BookStatus'}, {'alias': '도서 카테고리', 'name': 'BookCategory'}], 'previewAttributes': ['book_id', 'title', 'isbn', 'author', 'publisher', 'category', 'status', 'registration_date', 'disposal_date', 'disposal_reason', 'created_at', 'updated_at', 'history_id', 'previous_status', 'new_status', 'change_reason', 'changed_by', 'change_date'], 'valueObjects': [{'alias': 'ISBN', 'name': 'ISBN', 'referencedAggregateName': ''}, {'alias': '대출 참조', 'name': 'LoanReference', 'referencedAggregate': {'alias': '대출 건', 'name': 'Loan'}}, {'alias': '예약 참조', 'name': 'ReservationReference', 'referencedAggregate': {'alias': '예약', 'name': 'Reservation'}}, {'alias': '도서 상태 변경 이력', 'name': 'BookStatusHistory', 'referencedAggregateName': ''}]}]}, 'LoanAndReservation': {'boundedContext': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LoanAndReservation (대출/예약 관리)\n\n## Role\n회원의 도서 대출, 반납, 예약, 대출 연장 및 연체 관리 등 대출과 예약 전반의 비즈니스 로직을 담당한다. 대출/반납 시 도서 상태 변경을 트리거하며, 예약 대기 및 연장 관련 정책을 구현한다.\n\n## Key Events\n- LoanStarted\n- BookReserved\n- LoanReturned\n- LoanExtended\n- LoanOverdue\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 \'대출중\'으로 변경되어야 해.\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 \'예약중\' 상태로 변경되어야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n## Event\n\n```json\n{\n  "name": "LoanStarted",\n  "displayName": "도서 대출 시작됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 조건이 맞으면 대출이 시작됨. 도서 상태는 \'대출중\'으로 변경.",\n  "inputs": [\n    "회원번호",\n    "회원명",\n    "도서",\n    "도서 상태: \'대출가능\'",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 건 생성",\n    "도서 상태: \'대출중\'",\n    "대출일/반납예정일"\n  ],\n  "nextEvents": [\n    "BookStateChanged",\n    "LoanExtended",\n    "LoanReturned",\n    "LoanOverdue"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "회원이 대출 중인 도서에 대해 예약을 신청함. 예약 시 도서 상태가 \'예약중\'으로 전환됨.",\n  "inputs": [\n    "회원번호",\n    "회원명",\n    "도서 상태: \'대출중\'"\n  ],\n  "outputs": [\n    "예약 정보 생성",\n    "도서 상태: \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStateChanged",\n    "LoanStarted"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출 도서를 반납함. 예약자가 있을 경우 \'예약중\', 없으면 \'대출가능\'으로 상태 전환.",\n  "inputs": [\n    "회원",\n    "도서",\n    "대출 건"\n  ],\n  "outputs": [\n    "반납일 기록",\n    "도서 상태: \'대출가능\' 또는 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStateChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 기간 연장을 요청하고 승인됨. 반납 예정일이 연장됨.",\n  "inputs": [\n    "회원",\n    "대출 건",\n    "연장 요청"\n  ],\n  "outputs": [\n    "반납 예정일 갱신"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanOverdue",\n  "displayName": "대출 연체 발생됨",\n  "actor": "System",\n  "level": 8,\n  "description": "반납 예정일이 지났지만 도서가 반납되지 않은 경우, 대출 상태가 \'연체\'로 변경됨.",\n  "inputs": [\n    "대출 건",\n    "반납 예정일 경과"\n  ],\n  "outputs": [\n    "대출 상태: \'연체\'"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n```\n\n```sql\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n```\n\n```sql\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n```\n\n```sql\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 도서 관리 (LibraryBookManagement)\n- **Reason**: 대출, 반납, 예약, 연체 등 도서의 상태 변화가 발생할 때마다 도서 관리 컨텍스트에 변경 이벤트를 전달해 도서 상태 및 이력을 갱신한다. 두 컨텍스트의 결합도를 낮추고, 상태 동기화를 위해 Pub/Sub를 사용했다.\n- **Interaction Pattern**: 대출/예약 관리에서 도서 상태 변화 이벤트를 발행하고, 도서 관리가 이를 구독해 상태를 갱신하며 이력을 기록한다.\n\n### 알림 서비스 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 & 알림 서비스 (reservation-notification)\n- **Reason**: 대출/예약 등 주요 이벤트 발생 시 회원에게 알림을 전송해야 한다. 알림 서비스는 PBC로 구현되며, 업무 핵심과는 분리된 Generic Domain이다.\n- **Interaction Pattern**: 대출/예약 관리에서 이벤트를 발행하고, 예약 & 알림 서비스가 이를 구독해 알림 메시지를 발송한다.', 'id': 'f14fbc47-448b-4037-b9ea-aeca8aaff531', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': 'f14fbc47-448b-4037-b9ea-aeca8aaff531', 'style': '{}', 'width': 560, 'x': 1185.0, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': 'f14fbc47-448b-4037-b9ea-aeca8aaff531', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LoanAndReservation', 'displayName': '대출/예약 관리', 'oldName': '', 'policies': [], 'portGenerated': 8081, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_613c878ea9e32c8caec2ce3815a728d6', 'requirements': {'ddl': "-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM('대출중', '연체', '반납완료', '연장') DEFAULT '대출중',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('예약중', '예약완료', '예약취소', '예약만료') DEFAULT '예약중',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM('대출', '반납', '연장', '연체알림', '분실신고') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);", 'ddlFields': ['loan_id', 'member_id', 'book_id', 'loan_date', 'due_date', 'return_date', 'loan_period_days', 'status', 'extension_count', 'created_at', 'updated_at', 'reservation_id', 'reservation_date', 'notification_sent', 'expiry_date', 'history_id', 'action_type', 'action_date', 'previous_due_date', 'new_due_date', 'notes', 'processed_by', 'overdue_id', 'overdue_days', 'fine_amount', 'fine_paid', 'notification_count', 'last_notification_date'], 'event': '{"name":"LoanStarted","displayName":"도서 대출 시작됨","actor":"Member","level":4,"description":"회원이 도서 대출을 신청하고, 조건이 맞으면 대출이 시작됨. 도서 상태는 \'대출중\'으로 변경.","inputs":["회원번호","회원명","도서","도서 상태: \'대출가능\'","대출 기간(7/14/30일)"],"outputs":["대출 건 생성","도서 상태: \'대출중\'","대출일/반납예정일"],"nextEvents":["BookStateChanged","LoanExtended","LoanReturned","LoanOverdue"]}\n{"name":"BookReserved","displayName":"도서 예약됨","actor":"Member","level":5,"description":"회원이 대출 중인 도서에 대해 예약을 신청함. 예약 시 도서 상태가 \'예약중\'으로 전환됨.","inputs":["회원번호","회원명","도서 상태: \'대출중\'"],"outputs":["예약 정보 생성","도서 상태: \'예약중\'"],"nextEvents":["BookStateChanged","LoanStarted"]}\n{"name":"LoanReturned","displayName":"도서 반납됨","actor":"Member","level":6,"description":"회원이 대출 도서를 반납함. 예약자가 있을 경우 \'예약중\', 없으면 \'대출가능\'으로 상태 전환.","inputs":["회원","도서","대출 건"],"outputs":["반납일 기록","도서 상태: \'대출가능\' 또는 \'예약중\'"],"nextEvents":["BookStateChanged"]}\n{"name":"LoanExtended","displayName":"대출 연장됨","actor":"Member","level":7,"description":"회원이 대출 기간 연장을 요청하고 승인됨. 반납 예정일이 연장됨.","inputs":["회원","대출 건","연장 요청"],"outputs":["반납 예정일 갱신"],"nextEvents":[]}\n{"name":"LoanOverdue","displayName":"대출 연체 발생됨","actor":"System","level":8,"description":"반납 예정일이 지났지만 도서가 반납되지 않은 경우, 대출 상태가 \'연체\'로 변경됨.","inputs":["대출 건","반납 예정일 경과"],"outputs":["대출 상태: \'연체\'"],"nextEvents":[]}', 'eventNames': 'LoanStarted, BookReserved, LoanReturned, LoanExtended, LoanOverdue 이벤트가 발생할 수 있어.', 'userStory': "'대출/반납' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 '대출중'으로 변경되어야 해.\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 '대출가능'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 '예약중' 상태로 변경되어야 해.\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n'도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해."}}, 'cons': {'cohesion': '대출과 예약이 연관된 복잡한 정책(예: 반납 시 예약자 우선 처리)이 있을 때 Cross-Aggregate 트랜잭션 관리 필요.', 'complexity': '업무 프로세스가 길어질 경우, orchestration이나 saga 패턴 등 별도의 프로세스 조정 필요.', 'consistency': '예약과 대출 간의 강한 일관성이 요구될 경우 eventual consistency 패턴 적용 필요.', 'coupling': '상태 변경 시 서로 이벤트 발행 및 외부 Pub/Sub로의 동기화 코드가 증가.', 'encapsulation': '업무 규칙이 양쪽 Aggregate에 분산될 수 있어 도메인 규칙 파악이 다소 분산될 수 있음.', 'independence': '예약-대출 간 정책 변화가 잦을 때 연계 로직을 지속적으로 맞춰줘야 함.', 'performance': '도서별 예약/대출 현황을 통합 조회 시 추가 조인 또는 데이터 집계 로직이 필요.'}, 'description': '# Bounded Context Overview: LoanAndReservation (대출/예약 관리)\n\n## Role\n회원의 도서 대출, 반납, 예약, 대출 연장 및 연체 관리 등 대출과 예약 전반의 비즈니스 로직을 담당한다. 대출/반납 시 도서 상태 변경을 트리거하며, 예약 대기 및 연장 관련 정책을 구현한다.\n\n## Key Events\n- LoanStarted\n- BookReserved\n- LoanReturned\n- LoanExtended\n- LoanOverdue\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 \'대출중\'으로 변경되어야 해.\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 \'예약중\' 상태로 변경되어야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n## Event\n\n```json\n{\n  "name": "LoanStarted",\n  "displayName": "도서 대출 시작됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 조건이 맞으면 대출이 시작됨. 도서 상태는 \'대출중\'으로 변경.",\n  "inputs": [\n    "회원번호",\n    "회원명",\n    "도서",\n    "도서 상태: \'대출가능\'",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 건 생성",\n    "도서 상태: \'대출중\'",\n    "대출일/반납예정일"\n  ],\n  "nextEvents": [\n    "BookStateChanged",\n    "LoanExtended",\n    "LoanReturned",\n    "LoanOverdue"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "회원이 대출 중인 도서에 대해 예약을 신청함. 예약 시 도서 상태가 \'예약중\'으로 전환됨.",\n  "inputs": [\n    "회원번호",\n    "회원명",\n    "도서 상태: \'대출중\'"\n  ],\n  "outputs": [\n    "예약 정보 생성",\n    "도서 상태: \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStateChanged",\n    "LoanStarted"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출 도서를 반납함. 예약자가 있을 경우 \'예약중\', 없으면 \'대출가능\'으로 상태 전환.",\n  "inputs": [\n    "회원",\n    "도서",\n    "대출 건"\n  ],\n  "outputs": [\n    "반납일 기록",\n    "도서 상태: \'대출가능\' 또는 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStateChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 기간 연장을 요청하고 승인됨. 반납 예정일이 연장됨.",\n  "inputs": [\n    "회원",\n    "대출 건",\n    "연장 요청"\n  ],\n  "outputs": [\n    "반납 예정일 갱신"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanOverdue",\n  "displayName": "대출 연체 발생됨",\n  "actor": "System",\n  "level": 8,\n  "description": "반납 예정일이 지났지만 도서가 반납되지 않은 경우, 대출 상태가 \'연체\'로 변경됨.",\n  "inputs": [\n    "대출 건",\n    "반납 예정일 경과"\n  ],\n  "outputs": [\n    "대출 상태: \'연체\'"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n```\n\n```sql\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n```\n\n```sql\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n```\n\n```sql\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 도서 관리 (LibraryBookManagement)\n- **Reason**: 대출, 반납, 예약, 연체 등 도서의 상태 변화가 발생할 때마다 도서 관리 컨텍스트에 변경 이벤트를 전달해 도서 상태 및 이력을 갱신한다. 두 컨텍스트의 결합도를 낮추고, 상태 동기화를 위해 Pub/Sub를 사용했다.\n- **Interaction Pattern**: 대출/예약 관리에서 도서 상태 변화 이벤트를 발행하고, 도서 관리가 이를 구독해 상태를 갱신하며 이력을 기록한다.\n\n### 알림 서비스 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 & 알림 서비스 (reservation-notification)\n- **Reason**: 대출/예약 등 주요 이벤트 발생 시 회원에게 알림을 전송해야 한다. 알림 서비스는 PBC로 구현되며, 업무 핵심과는 분리된 Generic Domain이다.\n- **Interaction Pattern**: 대출/예약 관리에서 이벤트를 발행하고, 예약 & 알림 서비스가 이를 구독해 알림 메시지를 발송한다.', 'isAIRecommended': False, 'pros': {'cohesion': '대출과 예약의 정책, 업무 흐름을 각자의 Aggregate에서 독립적으로 관리하여 관심사의 분리가 명확.', 'complexity': '업무 복잡도 증가에도 구조가 단순하게 유지되어 유지보수 및 테스트가 쉬움.', 'consistency': '각 Aggregate 내의 핵심 비즈니스 규칙(예: 대출→연체, 예약→예약완료 등)은 원자적 트랜잭션으로 처리 가능.', 'coupling': '도서, 회원 참조 외에는 타 Aggregate와의 의존성이 없어 서비스의 모듈화와 확장이 용이.', 'encapsulation': '도서 상태변경, 알림 이벤트 발행 등 업무 경계 밖 기능을 ValueObject 및 이벤트로 분리해 도메인 규칙 은닉.', 'independence': '대출 정책 혹은 예약 정책이 바뀌더라도 상호 영향 없이 개발/배포 가능.', 'performance': '예약, 대출이 빈번히 동시에 발생해도 별도의 Aggregate로 관리되어 경합 최소화.'}, 'structure': [{'aggregate': {'alias': '대출 건', 'name': 'Loan'}, 'enumerations': [{'alias': '대출 상태', 'name': 'LoanStatus'}], 'previewAttributes': ['loan_id', 'member_id', 'book_id', 'loan_date', 'due_date', 'return_date', 'loan_period_days', 'status', 'extension_count', 'created_at', 'updated_at', 'history_id', 'action_type', 'action_date', 'previous_due_date', 'new_due_date', 'notes', 'processed_by', 'overdue_id', 'overdue_days', 'fine_amount', 'fine_paid', 'notification_count', 'last_notification_date'], 'valueObjects': [{'alias': '도서 참조', 'name': 'BookReference', 'referencedAggregate': {'alias': '도서', 'name': 'Book'}}, {'alias': '회원', 'name': 'Member'}, {'alias': '대출 이력', 'name': 'LoanHistory', 'referencedAggregateName': ''}]}, {'aggregate': {'alias': '예약', 'name': 'Reservation'}, 'enumerations': [{'alias': '예약 상태', 'name': 'ReservationStatus'}], 'previewAttributes': ['reservation_id', 'member_id', 'book_id', 'reservation_date', 'status', 'notification_sent', 'expiry_date', 'created_at', 'updated_at'], 'valueObjects': [{'alias': '도서 참조', 'name': 'BookReference', 'referencedAggregate': {'alias': '도서', 'name': 'Book'}}, {'alias': '회원', 'name': 'Member'}, {'alias': '예약 이력', 'name': 'ReservationHistory', 'referencedAggregateName': ''}]}]}}, userInfo=UserInfoModel(uid='EYCl46CwWAWvpz2E1BCUpVgPIpa2', authorized='admin', consultingTime=0, email='shinseongjin@uengine.org', name='shinseongjin@uengine.org', profile='https://avatars.githubusercontent.com/u/163972132?v=4', providerUid='163972132', savedCoin=0, savedToolTime=0), information=InformationModel(projectId='163972132_es_613c878ea9e32c8caec2ce3815a728d6', author='EYCl46CwWAWvpz2E1BCUpVgPIpa2', authorEmail='shinseongjin@uengine.org', comment='', createdTimeStamp=1754544053448, lastModifiedTimeStamp=1754544053448, projectName='untitled', type='es'), llmModel=LLMModel(model_vendor='openai', model_name='gpt-4.1-2025-04-14', model_kwargs={}, model_max_input_limit=962429, api_key=''), preferedLanguage='Korean', jobId='d7d461be-c95c-1ed6-34a1-d935b613f2ec'), subgraphs=SubgraphsModel(createAggregateByFunctionsModel=CreateAggregateByFunctionsModel(current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False, ddl_extraction_complete=False, ddl_assignment_complete=False, all_ddl_fields=[]), createAggregateClassIdByDraftsModel=CreateAggregateClassIdByDraftsModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createCommandActionsByFunctionModel=CreateCommandActionsByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False, assign_event_names_complete=False), createPolicyActionsByFunctionModel=CreatePolicyActionsByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createGwtGeneratorByFunctionModel=CreateGwtGeneratorByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), esValueSummaryGeneratorModel=ESValueSummaryGeneratorModel(is_processing=False, is_complete=False, is_failed=False, context='', keys_to_filter=[], max_tokens=0, token_calc_model_vendor='', token_calc_model_name='', summarized_es_value={}, processed_summarized_es_value={}, element_ids=[], sorted_element_ids=[], retry_count=0, max_retry_count=3)), outputs=OutputsModel(esValue=EsValueModel(elements={'01aef040-81b3-453f-98fe-fbd114469077': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LibraryBookManagement (도서 관리)\n\n## Role\n도서 등록, 도서 정보 수정, 도서 폐기, 도서 상태 관리 및 상태 변경 이력 기록을 담당한다. ISBN 중복 검증, 카테고리 관리, 폐기 상태 처리 등 도서에 대한 라이프사이클과 상태 추적을 관리한다.\n\n## Key Events\n- BookRegistered\n- BookDisposed\n- BookStateChanged\n- BookHistoryRecorded\n\n# Requirements\n\n## userStory\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "Librarian",\n  "level": 1,\n  "description": "사서가 도서 정보를 입력하여 신규 도서를 등록함. ISBN은 13자리로, 중복이 없어야 함. 등록된 도서는 \'대출가능\' 상태가 됨.",\n  "inputs": [\n    "도서명",\n    "ISBN",\n    "저자",\n    "출판사",\n    "카테고리(소설/비소설/학술/잡지)",\n    "ISBN 중복 아님"\n  ],\n  "outputs": [\n    "신규 도서 정보",\n    "\'대출가능\' 상태"\n  ],\n  "nextEvents": [\n    "BookStateChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookStateChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "System",\n  "level": 2,\n  "description": "도서의 상태가 자동 또는 수동으로 변경됨. 상태는 대출가능/대출중/예약중/폐기 등으로 변할 수 있음.",\n  "inputs": [\n    "도서",\n    "상태 변경 조건(대출, 반납, 예약, 폐기 등)"\n  ],\n  "outputs": [\n    "변경된 도서 상태"\n  ],\n  "nextEvents": [\n    "BookDisposed",\n    "LoanStarted",\n    "BookReserved",\n    "LoanReturned"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookDisposed",\n  "displayName": "도서 폐기됨",\n  "actor": "Librarian",\n  "level": 3,\n  "description": "도서가 분실 또는 훼손으로 폐기 처리됨. 폐기된 도서는 대출 불가.",\n  "inputs": [\n    "도서",\n    "폐기 사유(훼손, 분실)"\n  ],\n  "outputs": [\n    "도서 상태: \'폐기\'"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookHistoryRecorded",\n  "displayName": "도서 이력 기록됨",\n  "actor": "System",\n  "level": 9,\n  "description": "도서의 모든 상태 변화, 대출/반납/예약/폐기 등의 이력을 기록함.",\n  "inputs": [\n    "도서",\n    "상태 변화, 대출/반납/예약/폐기 이벤트"\n  ],\n  "outputs": [\n    "이력 데이터 축적"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n```\n\n```sql\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: receives from 대출/예약 관리 (LoanAndReservation)\n- **Reason**: 대출, 반납, 예약, 연체 등 도서의 상태 변화가 발생할 때마다 도서 관리 컨텍스트에 변경 이벤트를 전달해 도서 상태 및 이력을 갱신한다. 두 컨텍스트의 결합도를 낮추고, 상태 동기화를 위해 Pub/Sub를 사용했다.\n- **Interaction Pattern**: 대출/예약 관리에서 도서 상태 변화 이벤트를 발행하고, 도서 관리가 이를 구독해 상태를 갱신하며 이력을 기록한다.', 'id': '01aef040-81b3-453f-98fe-fbd114469077', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': '01aef040-81b3-453f-98fe-fbd114469077', 'style': '{}', 'width': 560, 'x': 600, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': '01aef040-81b3-453f-98fe-fbd114469077', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LibraryBookManagement', 'displayName': '도서 관리', 'oldName': '', 'policies': [], 'portGenerated': 8080, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_613c878ea9e32c8caec2ce3815a728d6'}, 'f14fbc47-448b-4037-b9ea-aeca8aaff531': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LoanAndReservation (대출/예약 관리)\n\n## Role\n회원의 도서 대출, 반납, 예약, 대출 연장 및 연체 관리 등 대출과 예약 전반의 비즈니스 로직을 담당한다. 대출/반납 시 도서 상태 변경을 트리거하며, 예약 대기 및 연장 관련 정책을 구현한다.\n\n## Key Events\n- LoanStarted\n- BookReserved\n- LoanReturned\n- LoanExtended\n- LoanOverdue\n\n# Requirements\n\n## userStory\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 \'대출중\'으로 변경되어야 해.\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 \'예약중\' 상태로 변경되어야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n## Event\n\n```json\n{\n  "name": "LoanStarted",\n  "displayName": "도서 대출 시작됨",\n  "actor": "Member",\n  "level": 4,\n  "description": "회원이 도서 대출을 신청하고, 조건이 맞으면 대출이 시작됨. 도서 상태는 \'대출중\'으로 변경.",\n  "inputs": [\n    "회원번호",\n    "회원명",\n    "도서",\n    "도서 상태: \'대출가능\'",\n    "대출 기간(7/14/30일)"\n  ],\n  "outputs": [\n    "대출 건 생성",\n    "도서 상태: \'대출중\'",\n    "대출일/반납예정일"\n  ],\n  "nextEvents": [\n    "BookStateChanged",\n    "LoanExtended",\n    "LoanReturned",\n    "LoanOverdue"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookReserved",\n  "displayName": "도서 예약됨",\n  "actor": "Member",\n  "level": 5,\n  "description": "회원이 대출 중인 도서에 대해 예약을 신청함. 예약 시 도서 상태가 \'예약중\'으로 전환됨.",\n  "inputs": [\n    "회원번호",\n    "회원명",\n    "도서 상태: \'대출중\'"\n  ],\n  "outputs": [\n    "예약 정보 생성",\n    "도서 상태: \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStateChanged",\n    "LoanStarted"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanReturned",\n  "displayName": "도서 반납됨",\n  "actor": "Member",\n  "level": 6,\n  "description": "회원이 대출 도서를 반납함. 예약자가 있을 경우 \'예약중\', 없으면 \'대출가능\'으로 상태 전환.",\n  "inputs": [\n    "회원",\n    "도서",\n    "대출 건"\n  ],\n  "outputs": [\n    "반납일 기록",\n    "도서 상태: \'대출가능\' 또는 \'예약중\'"\n  ],\n  "nextEvents": [\n    "BookStateChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanExtended",\n  "displayName": "대출 연장됨",\n  "actor": "Member",\n  "level": 7,\n  "description": "회원이 대출 기간 연장을 요청하고 승인됨. 반납 예정일이 연장됨.",\n  "inputs": [\n    "회원",\n    "대출 건",\n    "연장 요청"\n  ],\n  "outputs": [\n    "반납 예정일 갱신"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanOverdue",\n  "displayName": "대출 연체 발생됨",\n  "actor": "System",\n  "level": 8,\n  "description": "반납 예정일이 지났지만 도서가 반납되지 않은 경우, 대출 상태가 \'연체\'로 변경됨.",\n  "inputs": [\n    "대출 건",\n    "반납 예정일 경과"\n  ],\n  "outputs": [\n    "대출 상태: \'연체\'"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n```\n\n```sql\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n```\n\n```sql\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n```\n\n```sql\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 도서 관리 (LibraryBookManagement)\n- **Reason**: 대출, 반납, 예약, 연체 등 도서의 상태 변화가 발생할 때마다 도서 관리 컨텍스트에 변경 이벤트를 전달해 도서 상태 및 이력을 갱신한다. 두 컨텍스트의 결합도를 낮추고, 상태 동기화를 위해 Pub/Sub를 사용했다.\n- **Interaction Pattern**: 대출/예약 관리에서 도서 상태 변화 이벤트를 발행하고, 도서 관리가 이를 구독해 상태를 갱신하며 이력을 기록한다.\n\n### 알림 서비스 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 & 알림 서비스 (reservation-notification)\n- **Reason**: 대출/예약 등 주요 이벤트 발생 시 회원에게 알림을 전송해야 한다. 알림 서비스는 PBC로 구현되며, 업무 핵심과는 분리된 Generic Domain이다.\n- **Interaction Pattern**: 대출/예약 관리에서 이벤트를 발행하고, 예약 & 알림 서비스가 이를 구독해 알림 메시지를 발송한다.', 'id': 'f14fbc47-448b-4037-b9ea-aeca8aaff531', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': 'f14fbc47-448b-4037-b9ea-aeca8aaff531', 'style': '{}', 'width': 560, 'x': 1185.0, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': 'f14fbc47-448b-4037-b9ea-aeca8aaff531', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LoanAndReservation', 'displayName': '대출/예약 관리', 'oldName': '', 'policies': [], 'portGenerated': 8081, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_613c878ea9e32c8caec2ce3815a728d6', 'requirements': {'ddl': "-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM('대출중', '연체', '반납완료', '연장') DEFAULT '대출중',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('예약중', '예약완료', '예약취소', '예약만료') DEFAULT '예약중',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM('대출', '반납', '연장', '연체알림', '분실신고') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);", 'ddlFields': ['loan_id', 'member_id', 'book_id', 'loan_date', 'due_date', 'return_date', 'loan_period_days', 'status', 'extension_count', 'created_at', 'updated_at', 'reservation_id', 'reservation_date', 'notification_sent', 'expiry_date', 'history_id', 'action_type', 'action_date', 'previous_due_date', 'new_due_date', 'notes', 'processed_by', 'overdue_id', 'overdue_days', 'fine_amount', 'fine_paid', 'notification_count', 'last_notification_date'], 'event': '{"name":"LoanStarted","displayName":"도서 대출 시작됨","actor":"Member","level":4,"description":"회원이 도서 대출을 신청하고, 조건이 맞으면 대출이 시작됨. 도서 상태는 \'대출중\'으로 변경.","inputs":["회원번호","회원명","도서","도서 상태: \'대출가능\'","대출 기간(7/14/30일)"],"outputs":["대출 건 생성","도서 상태: \'대출중\'","대출일/반납예정일"],"nextEvents":["BookStateChanged","LoanExtended","LoanReturned","LoanOverdue"]}\n{"name":"BookReserved","displayName":"도서 예약됨","actor":"Member","level":5,"description":"회원이 대출 중인 도서에 대해 예약을 신청함. 예약 시 도서 상태가 \'예약중\'으로 전환됨.","inputs":["회원번호","회원명","도서 상태: \'대출중\'"],"outputs":["예약 정보 생성","도서 상태: \'예약중\'"],"nextEvents":["BookStateChanged","LoanStarted"]}\n{"name":"LoanReturned","displayName":"도서 반납됨","actor":"Member","level":6,"description":"회원이 대출 도서를 반납함. 예약자가 있을 경우 \'예약중\', 없으면 \'대출가능\'으로 상태 전환.","inputs":["회원","도서","대출 건"],"outputs":["반납일 기록","도서 상태: \'대출가능\' 또는 \'예약중\'"],"nextEvents":["BookStateChanged"]}\n{"name":"LoanExtended","displayName":"대출 연장됨","actor":"Member","level":7,"description":"회원이 대출 기간 연장을 요청하고 승인됨. 반납 예정일이 연장됨.","inputs":["회원","대출 건","연장 요청"],"outputs":["반납 예정일 갱신"],"nextEvents":[]}\n{"name":"LoanOverdue","displayName":"대출 연체 발생됨","actor":"System","level":8,"description":"반납 예정일이 지났지만 도서가 반납되지 않은 경우, 대출 상태가 \'연체\'로 변경됨.","inputs":["대출 건","반납 예정일 경과"],"outputs":["대출 상태: \'연체\'"],"nextEvents":[]}', 'eventNames': 'LoanStarted, BookReserved, LoanReturned, LoanExtended, LoanOverdue 이벤트가 발생할 수 있어.', 'userStory': "'대출/반납' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 '대출중'으로 변경되어야 해.\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 '대출가능'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 '예약중' 상태로 변경되어야 해.\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n'도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해."}}}, relations={}), isCompleted=False, isFailed=False, logs=[LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message='[ROOT_GRAPH] Starting new event storming generation process'), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message='[ROOT_GRAPH] Starting bounded context creation process'), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message='[ROOT_GRAPH] Processing 2 bounded contexts for creation'), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message="[ROOT_GRAPH] Processing bounded context 1/2: 'LibraryBookManagement'"), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message="[ROOT_GRAPH] Creating new bounded context: 'LibraryBookManagement'"), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message="[ROOT_GRAPH] Successfully created bounded context: 'LibraryBookManagement' with ID: '01aef040-81b3-453f-98fe-fbd114469077'"), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message="[ROOT_GRAPH] Processing bounded context 2/2: 'LoanAndReservation'"), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message="[ROOT_GRAPH] Creating new bounded context: 'LoanAndReservation'"), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message="[ROOT_GRAPH] Successfully created bounded context: 'LoanAndReservation' with ID: 'f14fbc47-448b-4037-b9ea-aeca8aaff531'"), LogModel(created_at='2025-08-07T14:19:54.595961', level='info', message='[ROOT_GRAPH] Bounded context creation completed successfully. Created: 2 contexts')], totalProgressCount=14, currentProgressCount=1, lastCompletedRootGraphNode=None, lastCompletedSubGraphNode=None))