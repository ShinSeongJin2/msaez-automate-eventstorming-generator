from ....models import *

create_aggregate_actions_by_function_subgraph_inputs = State(inputs=InputsModel(selectedDraftOptions={'LibraryBookManagement': {'boundedContext': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LibraryBookManagement (도서 관리)\n\n## Role\n도서의 등록, 상태 관리(대출가능/대출중/예약중/폐기 등), ISBN 중복 체크, 도서 정보 관리, 도서 상태 변경 이력 기록 등을 담당한다. 도서 상태 변화의 기준과 도서별 이력을 관리하여 도서의 현황을 체계적으로 관리한다.\n\n## Key Events\n- BookRegistered\n- BookRegistrationFailedDueToDuplicateISBN\n- BookStatusChanged\n- BookDiscarded\n\n# Requirements\n\n## userStory\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "도서 관리자",\n  "level": 1,\n  "description": "도서 관리자가 새로운 도서를 도서명, ISBN, 저자, 출판사, 카테고리 정보와 함께 등록함. 등록된 도서는 \'대출가능\' 상태가 됨.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리",\n    "ISBN 중복 확인 완료"\n  ],\n  "outputs": [\n    "신규 도서 등록",\n    "도서 상태: 대출가능"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookRegistrationFailedDueToDuplicateISBN",\n  "displayName": "ISBN 중복으로 도서 등록 실패됨",\n  "actor": "도서 관리자",\n  "level": 2,\n  "description": "입력한 ISBN이 이미 존재하는 ISBN과 중복되어 도서 등록에 실패함.",\n  "inputs": [\n    "ISBN(13자리)",\n    "중복 ISBN 존재"\n  ],\n  "outputs": [\n    "도서 등록 불가 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "도서 관리 시스템",\n  "level": 3,\n  "description": "도서의 상태가 등록, 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "상태 변경 트리거 이벤트(등록, 대출, 반납, 예약, 폐기 등)",\n    "해당 도서"\n  ],\n  "outputs": [\n    "도서 상태 값 갱신"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookDiscarded",\n  "displayName": "도서 폐기됨",\n  "actor": "도서 관리자",\n  "level": 4,\n  "description": "도서가 훼손 또는 분실 등 사유로 폐기 처리되어, 해당 도서는 더 이상 대출이 불가함.",\n  "inputs": [\n    "폐기 사유",\n    "해당 도서"\n  ],\n  "outputs": [\n    "도서 상태: 폐기",\n    "대출 불가 처리"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n## DDL\n\n```sql\n-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n```\n\n```sql\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: receives from 대출/예약/반납 관리 (LoanAndReservation)\n- **Reason**: 도서의 대출/반납/예약 등의 이벤트에 따라 도서 상태가 바뀌어야 하므로, 상태 변경 이벤트를 Pub/Sub으로 발행해 도서 관리에서 상태를 갱신하도록 분리하였다.\n- **Interaction Pattern**: 대출/예약/반납 관리에서 도서 상태 관련 이벤트를 발행하고, 도서 관리가 이를 구독하여 Book 상태를 갱신한다.\n\n### 도서 상태 알림 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 및 알림 서비스 (reservation-notification)\n- **Reason**: 도서가 폐기, 신규 등록, 상태 변화 등 중요한 변화가 있을 때 별도의 알림이 필요할 수 있으므로, 도서 관리에서 발생하는 이벤트를 알림 PBC에서 구독한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변화 시 reservation-notification PBC에 이벤트를 발행해 사용자에게 알림을 제공한다.', 'id': 'e0afcd5a-02a5-4396-866d-97168678b79c', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': 'e0afcd5a-02a5-4396-866d-97168678b79c', 'style': '{}', 'width': 560, 'x': 600, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': 'e0afcd5a-02a5-4396-866d-97168678b79c', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LibraryBookManagement', 'displayName': '도서 관리', 'oldName': '', 'policies': [], 'portGenerated': 8080, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_00a6d81d6f9f84aa4236e7c3f60172fe', 'requirements': {'ddl': "-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM('소설', '비소설', '학술', '잡지') NOT NULL,\n    status ENUM('대출가능', '대출중', '예약중', '폐기') DEFAULT '대출가능',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM('대출가능', '대출중', '예약중', '폐기'),\n    new_status ENUM('대출가능', '대출중', '예약중', '폐기') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);", 'event': '{"name":"BookRegistered","displayName":"도서 등록됨","actor":"도서 관리자","level":1,"description":"도서 관리자가 새로운 도서를 도서명, ISBN, 저자, 출판사, 카테고리 정보와 함께 등록함. 등록된 도서는 \'대출가능\' 상태가 됨.","inputs":["도서명","ISBN(13자리)","저자","출판사","카테고리","ISBN 중복 확인 완료"],"outputs":["신규 도서 등록","도서 상태: 대출가능"],"nextEvents":["BookStatusChanged"]}\n{"name":"BookRegistrationFailedDueToDuplicateISBN","displayName":"ISBN 중복으로 도서 등록 실패됨","actor":"도서 관리자","level":2,"description":"입력한 ISBN이 이미 존재하는 ISBN과 중복되어 도서 등록에 실패함.","inputs":["ISBN(13자리)","중복 ISBN 존재"],"outputs":["도서 등록 불가 알림"],"nextEvents":[]}\n{"name":"BookStatusChanged","displayName":"도서 상태 변경됨","actor":"도서 관리 시스템","level":3,"description":"도서의 상태가 등록, 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.","inputs":["상태 변경 트리거 이벤트(등록, 대출, 반납, 예약, 폐기 등)","해당 도서"],"outputs":["도서 상태 값 갱신"],"nextEvents":[]}\n{"name":"BookDiscarded","displayName":"도서 폐기됨","actor":"도서 관리자","level":4,"description":"도서가 훼손 또는 분실 등 사유로 폐기 처리되어, 해당 도서는 더 이상 대출이 불가함.","inputs":["폐기 사유","해당 도서"],"outputs":["도서 상태: 폐기","대출 불가 처리"],"nextEvents":["BookStatusChanged"]}', 'eventNames': 'BookRegistered, BookRegistrationFailedDueToDuplicateISBN, BookStatusChanged, BookDiscarded 이벤트가 발생할 수 있어.', 'userStory': "'도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해."}}, 'cons': {'cohesion': '상태 이력, 대출 참조 등 이질적 성격의 속성이 모두 Book에 묶여 있어 도메인 내 결합도가 다소 높아질 수 있음.', 'complexity': '단일 Aggregate에 다양한 역할이 추가되면 모델이 점차 복잡해질 수 있음.', 'consistency': '상태 변경, 이력 기록, 참조 동시 변경이 많은 경우 트랜잭션 경계가 과하게 넓어질 수 있음.', 'coupling': '도서 이력 또는 외부 참조 구조가 복잡해질 경우 Book 자체가 비대해질 수 있음.', 'encapsulation': '외부 연동 이벤트(대출/예약) 처리 규칙이 Book에 집중되어 도메인 로직이 무거워질 수 있음.', 'independence': '이력 관리나 외부 참조와 같은 부분적 변경이 전체 Book에 영향을 줄 수 있음.', 'performance': '이력 데이터가 누적될수록 Book 객체의 사이즈가 커져 장기적으로 성능 저하 우려.'}, 'description': '# Bounded Context Overview: LibraryBookManagement (도서 관리)\n\n## Role\n도서의 등록, 상태 관리(대출가능/대출중/예약중/폐기 등), ISBN 중복 체크, 도서 정보 관리, 도서 상태 변경 이력 기록 등을 담당한다. 도서 상태 변화의 기준과 도서별 이력을 관리하여 도서의 현황을 체계적으로 관리한다.\n\n## Key Events\n- BookRegistered\n- BookRegistrationFailedDueToDuplicateISBN\n- BookStatusChanged\n- BookDiscarded\n\n# Requirements\n\n## userStory\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "도서 관리자",\n  "level": 1,\n  "description": "도서 관리자가 새로운 도서를 도서명, ISBN, 저자, 출판사, 카테고리 정보와 함께 등록함. 등록된 도서는 \'대출가능\' 상태가 됨.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리",\n    "ISBN 중복 확인 완료"\n  ],\n  "outputs": [\n    "신규 도서 등록",\n    "도서 상태: 대출가능"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookRegistrationFailedDueToDuplicateISBN",\n  "displayName": "ISBN 중복으로 도서 등록 실패됨",\n  "actor": "도서 관리자",\n  "level": 2,\n  "description": "입력한 ISBN이 이미 존재하는 ISBN과 중복되어 도서 등록에 실패함.",\n  "inputs": [\n    "ISBN(13자리)",\n    "중복 ISBN 존재"\n  ],\n  "outputs": [\n    "도서 등록 불가 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "도서 관리 시스템",\n  "level": 3,\n  "description": "도서의 상태가 등록, 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "상태 변경 트리거 이벤트(등록, 대출, 반납, 예약, 폐기 등)",\n    "해당 도서"\n  ],\n  "outputs": [\n    "도서 상태 값 갱신"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookDiscarded",\n  "displayName": "도서 폐기됨",\n  "actor": "도서 관리자",\n  "level": 4,\n  "description": "도서가 훼손 또는 분실 등 사유로 폐기 처리되어, 해당 도서는 더 이상 대출이 불가함.",\n  "inputs": [\n    "폐기 사유",\n    "해당 도서"\n  ],\n  "outputs": [\n    "도서 상태: 폐기",\n    "대출 불가 처리"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n## DDL\n\n```sql\n-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n```\n\n```sql\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: receives from 대출/예약/반납 관리 (LoanAndReservation)\n- **Reason**: 도서의 대출/반납/예약 등의 이벤트에 따라 도서 상태가 바뀌어야 하므로, 상태 변경 이벤트를 Pub/Sub으로 발행해 도서 관리에서 상태를 갱신하도록 분리하였다.\n- **Interaction Pattern**: 대출/예약/반납 관리에서 도서 상태 관련 이벤트를 발행하고, 도서 관리가 이를 구독하여 Book 상태를 갱신한다.\n\n### 도서 상태 알림 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 및 알림 서비스 (reservation-notification)\n- **Reason**: 도서가 폐기, 신규 등록, 상태 변화 등 중요한 변화가 있을 때 별도의 알림이 필요할 수 있으므로, 도서 관리에서 발생하는 이벤트를 알림 PBC에서 구독한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변화 시 reservation-notification PBC에 이벤트를 발행해 사용자에게 알림을 제공한다.', 'isAIRecommended': False, 'pros': {'cohesion': '모든 도서 관련 상태, 이력, 참조를 하나의 Aggregate에서 관리하여 도서 단위 업무에 대한 일관성과 집중도가 높음.', 'complexity': '상대적으로 단일 도메인 객체 구조로 개발과 유지보수의 복잡도가 낮음.', 'consistency': 'ISBN 중복 체크, 상태 변경, 이력 기록 등 핵심 비즈니스 불변식을 하나의 트랜잭션에서 안전하게 보장할 수 있음.', 'coupling': '외부 컨텍스트(Loan, Reservation, Member) 참조는 VO를 통해 단방향으로 명확히 분리되어 Aggregate간 의존도가 최소화됨.', 'encapsulation': '상태 변화와 관련 규칙, 이력 기록이 Book 내부에 숨겨져 일관성 있게 처리됨.', 'independence': 'Book 단위로 서비스 확장이 가능해 외부 Aggregate 변화 영향이 제한적임.', 'performance': '도서 상태 및 이력 질의, 상태 변경 트랜잭션이 한 Aggregate 내에서 빠르게 처리됨.'}, 'structure': [{'aggregate': {'alias': '도서', 'name': 'Book'}, 'enumerations': [{'alias': '도서 상태', 'name': 'BookStatus'}, {'alias': '도서 카테고리', 'name': 'BookCategory'}], 'valueObjects': [{'alias': '대출 참조', 'name': 'LoanReference', 'referencedAggregate': {'alias': '대출', 'name': 'Loan'}}, {'alias': '예약 참조', 'name': 'ReservationReference', 'referencedAggregate': {'alias': '예약', 'name': 'Reservation'}}, {'alias': '회원 참조', 'name': 'MemberReference', 'referencedAggregate': {'alias': '회원', 'name': 'Member'}}, {'alias': '도서 상태 이력', 'name': 'BookStatusHistoryRecord', 'referencedAggregateName': ''}]}]}, 'LoanAndReservation': {'boundedContext': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LoanAndReservation (대출/예약/반납 관리)\n\n## Role\n회원의 대출/반납/연장/예약 등 대출 라이프사이클 전반을 담당하며, 도서 대출 상태와 예약 대기열을 관리하고, 대출 이력 및 연체 관리까지 포함한다. 도서의 상태 변화와 회원 상호작용을 프로세스 중심으로 처리한다.\n\n## Key Events\n- LoanApplied\n- LoanApplicationFailedBookNotAvailable\n- LoanCompleted\n- ReservationApplied\n- BookReturned\n- ReturnCompleted\n- LoanExtended\n- LoanExtensionFailedDueToReservation\n- LoanOverdueDetected\n\n# Requirements\n\n## userStory\n\n도서관의 도서 관리와 대출/반납을 통합적으로 관리하는 화면을 만들려고 해.\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 \'대출중\'으로 변경되어야 해.\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 \'예약중\' 상태로 변경되어야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "LoanApplied",\n  "displayName": "도서 대출 신청됨",\n  "actor": "회원",\n  "level": 5,\n  "description": "회원이 회원번호 및 이름으로 본인 확인 후 대출할 도서를 선택하고, 대출 기간을 지정하여 대출을 신청함.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서명/ISBN",\n    "대출 기간 선택(7/14/30일)",\n    "도서 상태: 대출가능"\n  ],\n  "outputs": [\n    "대출 신청 기록",\n    "도서 대출 프로세스 시작"\n  ],\n  "nextEvents": [\n    "LoanCompleted"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanApplicationFailedBookNotAvailable",\n  "displayName": "대출 불가(도서 미대출가능)",\n  "actor": "회원",\n  "level": 6,\n  "description": "대출 신청 시 도서가 이미 대출 중이거나 폐기되어 대출이 불가함을 알림.",\n  "inputs": [\n    "도서 상태: 대출중/예약중/폐기"\n  ],\n  "outputs": [\n    "대출 불가 알림",\n    "예약 가능 안내(해당시)"\n  ],\n  "nextEvents": [\n    "ReservationApplied"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanCompleted",\n  "displayName": "도서 대출 완료됨",\n  "actor": "도서 관리 시스템",\n  "level": 7,\n  "description": "대출 신청이 승인되어, 도서의 상태가 \'대출중\'으로 변경되고, 대출 이력이 등록됨.",\n  "inputs": [\n    "대출 신청 승인",\n    "도서 상태: 대출가능"\n  ],\n  "outputs": [\n    "도서 상태: 대출중",\n    "대출 이력 기록",\n    "반납예정일 생성"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "ReservationApplied",\n  "displayName": "도서 예약 신청됨",\n  "actor": "회원",\n  "level": 8,\n  "description": "회원이 대출 중인 도서에 대해 예약 신청을 완료함.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서명/ISBN",\n    "도서 상태: 대출중/예약중"\n  ],\n  "outputs": [\n    "도서 예약 기록",\n    "예약 대기열 추가"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "회원",\n  "level": 9,\n  "description": "회원이 대출한 도서를 반납 처리함.",\n  "inputs": [\n    "대출 이력",\n    "도서",\n    "회원"\n  ],\n  "outputs": [\n    "도서 반납 처리",\n    "반납일 기록"\n  ],\n  "nextEvents": [\n    "ReturnCompleted"\n  ]\n}\n```\n\n```json\n{\n  "name": "ReturnCompleted",\n  "displayName": "도서 반납 완료됨",\n  "actor": "도서 관리 시스템",\n  "level": 10,\n  "description": "도서 반납 처리가 완료되어, 예약자가 있으면 도서 상태를 \'예약중\'으로, 없으면 \'대출가능\'으로 변경함.",\n  "inputs": [\n    "반납된 도서",\n    "예약자 여부"\n  ],\n  "outputs": [\n    "도서 상태 변경",\n    "반납 이력 기록"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanExtended",\n  "displayName": "도서 대출 연장됨",\n  "actor": "회원",\n  "level": 11,\n  "description": "대출 중인 도서에 대해 회원이 연장 신청을 하여, 연장 조건 충족 시 대출 기간이 연장됨.",\n  "inputs": [\n    "대출 이력",\n    "도서 상태: 대출중",\n    "연장 조건 충족 여부"\n  ],\n  "outputs": [\n    "대출 기간 연장",\n    "반납예정일 변경"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanExtensionFailedDueToReservation",\n  "displayName": "예약자 존재로 대출 연장 불가",\n  "actor": "회원",\n  "level": 12,\n  "description": "해당 도서에 예약자가 있어 대출 연장이 불가함.",\n  "inputs": [\n    "대출 이력",\n    "도서 상태: 예약중",\n    "예약자 존재"\n  ],\n  "outputs": [\n    "연장 불가 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanOverdueDetected",\n  "displayName": "대출 연체 발생됨",\n  "actor": "도서 관리 시스템",\n  "level": 13,\n  "description": "반납 예정일이 지나도록 도서가 반납되지 않아 연체 상태로 전환됨.",\n  "inputs": [\n    "반납 예정일 경과",\n    "도서 미반납"\n  ],\n  "outputs": [\n    "대출 상태: 연체",\n    "회원 연체 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 회원 테이블\nCREATE TABLE members (\n    member_id VARCHAR(20) PRIMARY KEY,\n    member_name VARCHAR(100) NOT NULL,\n    phone VARCHAR(20),\n    email VARCHAR(100),\n    address TEXT,\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'ACTIVE\', \'INACTIVE\', \'SUSPENDED\') DEFAULT \'ACTIVE\',\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n\n```sql\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n```\n\n```sql\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n```\n\n```sql\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n```\n\n```sql\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 도서 관리 (LibraryBookManagement)\n- **Reason**: 도서의 대출/반납/예약 등의 이벤트에 따라 도서 상태가 바뀌어야 하므로, 상태 변경 이벤트를 Pub/Sub으로 발행해 도서 관리에서 상태를 갱신하도록 분리하였다.\n- **Interaction Pattern**: 대출/예약/반납 관리에서 도서 상태 관련 이벤트를 발행하고, 도서 관리가 이를 구독하여 Book 상태를 갱신한다.\n\n### 예약/알림 연동 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 및 알림 서비스 (reservation-notification)\n- **Reason**: 알림 및 예약 기능은 범용 서비스로 PBC에 위임하므로, 대출/예약/반납 관리에서 예약 또는 알림 트리거 이벤트를 발행하면 reservation-notification PBC가 구독하여 알림/예약 처리를 한다.\n- **Interaction Pattern**: 대출, 반납, 연체 등 이벤트가 발생할 때 예약 및 알림 서비스(PBC)로 이벤트를 발행해 알림/예약을 자동화한다.', 'id': '54d260a8-a496-4db1-957b-0a73e36dd990', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': '54d260a8-a496-4db1-957b-0a73e36dd990', 'style': '{}', 'width': 560, 'x': 1185.0, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': '54d260a8-a496-4db1-957b-0a73e36dd990', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LoanAndReservation', 'displayName': '대출/예약/반납 관리', 'oldName': '', 'policies': [], 'portGenerated': 8081, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_00a6d81d6f9f84aa4236e7c3f60172fe', 'requirements': {'ddl': "-- 회원 테이블\nCREATE TABLE members (\n    member_id VARCHAR(20) PRIMARY KEY,\n    member_name VARCHAR(100) NOT NULL,\n    phone VARCHAR(20),\n    email VARCHAR(100),\n    address TEXT,\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED') DEFAULT 'ACTIVE',\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM('대출중', '연체', '반납완료', '연장') DEFAULT '대출중',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('예약중', '예약완료', '예약취소', '예약만료') DEFAULT '예약중',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM('대출', '반납', '연장', '연체알림', '분실신고') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);", 'event': '{"name":"LoanApplied","displayName":"도서 대출 신청됨","actor":"회원","level":5,"description":"회원이 회원번호 및 이름으로 본인 확인 후 대출할 도서를 선택하고, 대출 기간을 지정하여 대출을 신청함.","inputs":["회원번호","이름","도서명/ISBN","대출 기간 선택(7/14/30일)","도서 상태: 대출가능"],"outputs":["대출 신청 기록","도서 대출 프로세스 시작"],"nextEvents":["LoanCompleted"]}\n{"name":"LoanApplicationFailedBookNotAvailable","displayName":"대출 불가(도서 미대출가능)","actor":"회원","level":6,"description":"대출 신청 시 도서가 이미 대출 중이거나 폐기되어 대출이 불가함을 알림.","inputs":["도서 상태: 대출중/예약중/폐기"],"outputs":["대출 불가 알림","예약 가능 안내(해당시)"],"nextEvents":["ReservationApplied"]}\n{"name":"LoanCompleted","displayName":"도서 대출 완료됨","actor":"도서 관리 시스템","level":7,"description":"대출 신청이 승인되어, 도서의 상태가 \'대출중\'으로 변경되고, 대출 이력이 등록됨.","inputs":["대출 신청 승인","도서 상태: 대출가능"],"outputs":["도서 상태: 대출중","대출 이력 기록","반납예정일 생성"],"nextEvents":["BookStatusChanged"]}\n{"name":"ReservationApplied","displayName":"도서 예약 신청됨","actor":"회원","level":8,"description":"회원이 대출 중인 도서에 대해 예약 신청을 완료함.","inputs":["회원번호","이름","도서명/ISBN","도서 상태: 대출중/예약중"],"outputs":["도서 예약 기록","예약 대기열 추가"],"nextEvents":["BookStatusChanged"]}\n{"name":"BookReturned","displayName":"도서 반납됨","actor":"회원","level":9,"description":"회원이 대출한 도서를 반납 처리함.","inputs":["대출 이력","도서","회원"],"outputs":["도서 반납 처리","반납일 기록"],"nextEvents":["ReturnCompleted"]}\n{"name":"ReturnCompleted","displayName":"도서 반납 완료됨","actor":"도서 관리 시스템","level":10,"description":"도서 반납 처리가 완료되어, 예약자가 있으면 도서 상태를 \'예약중\'으로, 없으면 \'대출가능\'으로 변경함.","inputs":["반납된 도서","예약자 여부"],"outputs":["도서 상태 변경","반납 이력 기록"],"nextEvents":["BookStatusChanged"]}\n{"name":"LoanExtended","displayName":"도서 대출 연장됨","actor":"회원","level":11,"description":"대출 중인 도서에 대해 회원이 연장 신청을 하여, 연장 조건 충족 시 대출 기간이 연장됨.","inputs":["대출 이력","도서 상태: 대출중","연장 조건 충족 여부"],"outputs":["대출 기간 연장","반납예정일 변경"],"nextEvents":[]}\n{"name":"LoanExtensionFailedDueToReservation","displayName":"예약자 존재로 대출 연장 불가","actor":"회원","level":12,"description":"해당 도서에 예약자가 있어 대출 연장이 불가함.","inputs":["대출 이력","도서 상태: 예약중","예약자 존재"],"outputs":["연장 불가 알림"],"nextEvents":[]}\n{"name":"LoanOverdueDetected","displayName":"대출 연체 발생됨","actor":"도서 관리 시스템","level":13,"description":"반납 예정일이 지나도록 도서가 반납되지 않아 연체 상태로 전환됨.","inputs":["반납 예정일 경과","도서 미반납"],"outputs":["대출 상태: 연체","회원 연체 알림"],"nextEvents":[]}', 'eventNames': 'LoanApplied, LoanApplicationFailedBookNotAvailable, LoanCompleted, ReservationApplied, BookReturned, ReturnCompleted, LoanExtended, LoanExtensionFailedDueToReservation, LoanOverdueDetected 이벤트가 발생할 수 있어.', 'userStory': "도서관의 도서 관리와 대출/반납을 통합적으로 관리하는 화면을 만들려고 해.\n'도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n'대출/반납' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 '대출중'으로 변경되어야 해.\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 '대출가능'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 '예약중' 상태로 변경되어야 해.\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해."}}, 'cons': {'cohesion': '예약, 연체 등과의 비즈니스 분리가 부족하여 도메인이 커질수록 하나의 집계가 과도하게 비대해질 수 있음.', 'complexity': 'Loan에 모든 로직이 집중되어 대출/연장/반납/연체 관련 코드가 복잡해질 수 있음.', 'consistency': '예약, 알림, 연체 관리 등 연관 기능이 분리되지 않아 부분적인 일관성/확장성 한계가 존재.', 'coupling': '예약 처리나 알림 등 외부 프로세스와의 이벤트/연동 로직이 Loan 집계에 집중될 가능성이 있음.', 'encapsulation': '복잡도가 증가하면 도메인별 로직이 내부에 혼재될 우려가 있음.', 'independence': '예약, 연체 등 별도 책임이 필요한 확장 요구에 유연하지 않음.', 'performance': '대출 처리 건수가 급증하면 하나의 집계에서 동시성 병목이 발생할 수 있음.'}, 'description': '# Bounded Context Overview: LoanAndReservation (대출/예약/반납 관리)\n\n## Role\n회원의 대출/반납/연장/예약 등 대출 라이프사이클 전반을 담당하며, 도서 대출 상태와 예약 대기열을 관리하고, 대출 이력 및 연체 관리까지 포함한다. 도서의 상태 변화와 회원 상호작용을 프로세스 중심으로 처리한다.\n\n## Key Events\n- LoanApplied\n- LoanApplicationFailedBookNotAvailable\n- LoanCompleted\n- ReservationApplied\n- BookReturned\n- ReturnCompleted\n- LoanExtended\n- LoanExtensionFailedDueToReservation\n- LoanOverdueDetected\n\n# Requirements\n\n## userStory\n\n도서관의 도서 관리와 대출/반납을 통합적으로 관리하는 화면을 만들려고 해.\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 \'대출중\'으로 변경되어야 해.\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 \'예약중\' 상태로 변경되어야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "LoanApplied",\n  "displayName": "도서 대출 신청됨",\n  "actor": "회원",\n  "level": 5,\n  "description": "회원이 회원번호 및 이름으로 본인 확인 후 대출할 도서를 선택하고, 대출 기간을 지정하여 대출을 신청함.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서명/ISBN",\n    "대출 기간 선택(7/14/30일)",\n    "도서 상태: 대출가능"\n  ],\n  "outputs": [\n    "대출 신청 기록",\n    "도서 대출 프로세스 시작"\n  ],\n  "nextEvents": [\n    "LoanCompleted"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanApplicationFailedBookNotAvailable",\n  "displayName": "대출 불가(도서 미대출가능)",\n  "actor": "회원",\n  "level": 6,\n  "description": "대출 신청 시 도서가 이미 대출 중이거나 폐기되어 대출이 불가함을 알림.",\n  "inputs": [\n    "도서 상태: 대출중/예약중/폐기"\n  ],\n  "outputs": [\n    "대출 불가 알림",\n    "예약 가능 안내(해당시)"\n  ],\n  "nextEvents": [\n    "ReservationApplied"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanCompleted",\n  "displayName": "도서 대출 완료됨",\n  "actor": "도서 관리 시스템",\n  "level": 7,\n  "description": "대출 신청이 승인되어, 도서의 상태가 \'대출중\'으로 변경되고, 대출 이력이 등록됨.",\n  "inputs": [\n    "대출 신청 승인",\n    "도서 상태: 대출가능"\n  ],\n  "outputs": [\n    "도서 상태: 대출중",\n    "대출 이력 기록",\n    "반납예정일 생성"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "ReservationApplied",\n  "displayName": "도서 예약 신청됨",\n  "actor": "회원",\n  "level": 8,\n  "description": "회원이 대출 중인 도서에 대해 예약 신청을 완료함.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서명/ISBN",\n    "도서 상태: 대출중/예약중"\n  ],\n  "outputs": [\n    "도서 예약 기록",\n    "예약 대기열 추가"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "회원",\n  "level": 9,\n  "description": "회원이 대출한 도서를 반납 처리함.",\n  "inputs": [\n    "대출 이력",\n    "도서",\n    "회원"\n  ],\n  "outputs": [\n    "도서 반납 처리",\n    "반납일 기록"\n  ],\n  "nextEvents": [\n    "ReturnCompleted"\n  ]\n}\n```\n\n```json\n{\n  "name": "ReturnCompleted",\n  "displayName": "도서 반납 완료됨",\n  "actor": "도서 관리 시스템",\n  "level": 10,\n  "description": "도서 반납 처리가 완료되어, 예약자가 있으면 도서 상태를 \'예약중\'으로, 없으면 \'대출가능\'으로 변경함.",\n  "inputs": [\n    "반납된 도서",\n    "예약자 여부"\n  ],\n  "outputs": [\n    "도서 상태 변경",\n    "반납 이력 기록"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanExtended",\n  "displayName": "도서 대출 연장됨",\n  "actor": "회원",\n  "level": 11,\n  "description": "대출 중인 도서에 대해 회원이 연장 신청을 하여, 연장 조건 충족 시 대출 기간이 연장됨.",\n  "inputs": [\n    "대출 이력",\n    "도서 상태: 대출중",\n    "연장 조건 충족 여부"\n  ],\n  "outputs": [\n    "대출 기간 연장",\n    "반납예정일 변경"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanExtensionFailedDueToReservation",\n  "displayName": "예약자 존재로 대출 연장 불가",\n  "actor": "회원",\n  "level": 12,\n  "description": "해당 도서에 예약자가 있어 대출 연장이 불가함.",\n  "inputs": [\n    "대출 이력",\n    "도서 상태: 예약중",\n    "예약자 존재"\n  ],\n  "outputs": [\n    "연장 불가 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanOverdueDetected",\n  "displayName": "대출 연체 발생됨",\n  "actor": "도서 관리 시스템",\n  "level": 13,\n  "description": "반납 예정일이 지나도록 도서가 반납되지 않아 연체 상태로 전환됨.",\n  "inputs": [\n    "반납 예정일 경과",\n    "도서 미반납"\n  ],\n  "outputs": [\n    "대출 상태: 연체",\n    "회원 연체 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 회원 테이블\nCREATE TABLE members (\n    member_id VARCHAR(20) PRIMARY KEY,\n    member_name VARCHAR(100) NOT NULL,\n    phone VARCHAR(20),\n    email VARCHAR(100),\n    address TEXT,\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'ACTIVE\', \'INACTIVE\', \'SUSPENDED\') DEFAULT \'ACTIVE\',\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n\n```sql\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n```\n\n```sql\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n```\n\n```sql\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n```\n\n```sql\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 도서 관리 (LibraryBookManagement)\n- **Reason**: 도서의 대출/반납/예약 등의 이벤트에 따라 도서 상태가 바뀌어야 하므로, 상태 변경 이벤트를 Pub/Sub으로 발행해 도서 관리에서 상태를 갱신하도록 분리하였다.\n- **Interaction Pattern**: 대출/예약/반납 관리에서 도서 상태 관련 이벤트를 발행하고, 도서 관리가 이를 구독하여 Book 상태를 갱신한다.\n\n### 예약/알림 연동 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 및 알림 서비스 (reservation-notification)\n- **Reason**: 알림 및 예약 기능은 범용 서비스로 PBC에 위임하므로, 대출/예약/반납 관리에서 예약 또는 알림 트리거 이벤트를 발행하면 reservation-notification PBC가 구독하여 알림/예약 처리를 한다.\n- **Interaction Pattern**: 대출, 반납, 연체 등 이벤트가 발생할 때 예약 및 알림 서비스(PBC)로 이벤트를 발행해 알림/예약을 자동화한다.', 'isAIRecommended': False, 'pros': {'cohesion': '대출 프로세스와 이력, 상태, 연장·반납 등 대출 라이프사이클에 필요한 모든 비즈니스 규칙이 단일 Aggregate에서 일관되게 관리되어 업무 규칙 누수 위험이 낮음.', 'complexity': '구조가 단순하여 학습 및 유지보수가 쉬움.', 'consistency': '대출 상태 변경, 연장, 반납, 연체 등 주요 이벤트가 모두 원자적으로 처리되어 도메인 불일치 위험이 최소화됨.', 'coupling': '대출과 관련된 변경(연장/반납/연체) 처리가 별도 집계와의 연동 없이 Aggregate 내부에서 트랜잭션 단위로 일어남.', 'encapsulation': '연장 및 연체 비즈니스 로직과 이력 관리를 Loan 내에 숨겨 외부에 내부 구현을 노출하지 않음.', 'independence': '대출 도메인의 독립적 확장이 용이하며, 외부 변경(회원/도서 관리 등)과의 결합도가 낮음.', 'performance': '대출 현황 및 상태 변경 쿼리가 단일 집계에서 즉시 처리되어 실시간 트랜잭션 처리 효율이 높음.'}, 'structure': [{'aggregate': {'alias': '대출', 'name': 'Loan'}, 'enumerations': [{'alias': '대출 상태', 'name': 'LoanStatus'}], 'valueObjects': [{'alias': '도서 참조', 'name': 'BookReference', 'referencedAggregate': {'alias': '도서', 'name': 'Book'}}, {'alias': '회원', 'name': 'Member'}]}]}}, userInfo=UserInfoModel(uid='EYCl46CwWAWvpz2E1BCUpVgPIpa2', authorized='admin', consultingTime=0, email='shinseongjin@uengine.org', name='shinseongjin@uengine.org', profile='https://avatars.githubusercontent.com/u/163972132?v=4', providerUid='163972132', savedCoin=0, savedToolTime=0), information=InformationModel(projectId='163972132_es_00a6d81d6f9f84aa4236e7c3f60172fe', author='EYCl46CwWAWvpz2E1BCUpVgPIpa2', authorEmail='shinseongjin@uengine.org', comment='', createdTimeStamp=1751597039203, lastModifiedTimeStamp=1751597039203, projectName='untitled', type='es'), llmModel=LLMModel(model_vendor='openai', model_name='gpt-4.1-2025-04-14', model_kwargs={}, model_max_input_limit=962429, api_key=''), preferedLanguage='Korean', jobId='8b799b0e-bca8-df53-cc46-45922d048912'), subgraphs=SubgraphsModel(createAggregateByFunctionsModel=CreateAggregateByFunctionsModel(current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createAggregateClassIdByDraftsModel=CreateAggregateClassIdByDraftsModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createCommandActionsByFunctionModel=CreateCommandActionsByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createPolicyActionsByFunctionModel=CreatePolicyActionsByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), createGwtGeneratorByFunctionModel=CreateGwtGeneratorByFunctionModel(draft_options={}, current_generation=None, completed_generations=[], pending_generations=[], is_processing=False, all_complete=False, max_retry_count=3, is_failed=False), esValueSummaryGeneratorModel=ESValueSummaryGeneratorModel(is_processing=False, is_complete=False, is_failed=False, context='', keys_to_filter=[], max_tokens=0, token_calc_model_vendor='', token_calc_model_name='', summarized_es_value={}, processed_summarized_es_value={}, element_ids=[], sorted_element_ids=[], retry_count=0, max_retry_count=3)), outputs=OutputsModel(esValue=EsValueModel(elements={'e0afcd5a-02a5-4396-866d-97168678b79c': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LibraryBookManagement (도서 관리)\n\n## Role\n도서의 등록, 상태 관리(대출가능/대출중/예약중/폐기 등), ISBN 중복 체크, 도서 정보 관리, 도서 상태 변경 이력 기록 등을 담당한다. 도서 상태 변화의 기준과 도서별 이력을 관리하여 도서의 현황을 체계적으로 관리한다.\n\n## Key Events\n- BookRegistered\n- BookRegistrationFailedDueToDuplicateISBN\n- BookStatusChanged\n- BookDiscarded\n\n# Requirements\n\n## userStory\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "BookRegistered",\n  "displayName": "도서 등록됨",\n  "actor": "도서 관리자",\n  "level": 1,\n  "description": "도서 관리자가 새로운 도서를 도서명, ISBN, 저자, 출판사, 카테고리 정보와 함께 등록함. 등록된 도서는 \'대출가능\' 상태가 됨.",\n  "inputs": [\n    "도서명",\n    "ISBN(13자리)",\n    "저자",\n    "출판사",\n    "카테고리",\n    "ISBN 중복 확인 완료"\n  ],\n  "outputs": [\n    "신규 도서 등록",\n    "도서 상태: 대출가능"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookRegistrationFailedDueToDuplicateISBN",\n  "displayName": "ISBN 중복으로 도서 등록 실패됨",\n  "actor": "도서 관리자",\n  "level": 2,\n  "description": "입력한 ISBN이 이미 존재하는 ISBN과 중복되어 도서 등록에 실패함.",\n  "inputs": [\n    "ISBN(13자리)",\n    "중복 ISBN 존재"\n  ],\n  "outputs": [\n    "도서 등록 불가 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookStatusChanged",\n  "displayName": "도서 상태 변경됨",\n  "actor": "도서 관리 시스템",\n  "level": 3,\n  "description": "도서의 상태가 등록, 대출, 반납, 예약, 폐기 등 이벤트에 따라 자동으로 변경됨.",\n  "inputs": [\n    "상태 변경 트리거 이벤트(등록, 대출, 반납, 예약, 폐기 등)",\n    "해당 도서"\n  ],\n  "outputs": [\n    "도서 상태 값 갱신"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "BookDiscarded",\n  "displayName": "도서 폐기됨",\n  "actor": "도서 관리자",\n  "level": 4,\n  "description": "도서가 훼손 또는 분실 등 사유로 폐기 처리되어, 해당 도서는 더 이상 대출이 불가함.",\n  "inputs": [\n    "폐기 사유",\n    "해당 도서"\n  ],\n  "outputs": [\n    "도서 상태: 폐기",\n    "대출 불가 처리"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n## DDL\n\n```sql\n-- 도서 테이블\nCREATE TABLE books (\n    book_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(500) NOT NULL,\n    isbn VARCHAR(13) UNIQUE NOT NULL,\n    author VARCHAR(200) NOT NULL,\n    publisher VARCHAR(200) NOT NULL,\n    category ENUM(\'소설\', \'비소설\', \'학술\', \'잡지\') NOT NULL,\n    status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') DEFAULT \'대출가능\',\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    disposal_date DATETIME NULL,\n    disposal_reason TEXT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_title (title),\n    INDEX idx_isbn (isbn),\n    INDEX idx_status (status),\n    INDEX idx_category (category)\n);\n```\n\n```sql\n-- 도서 상태 변경 이력 테이블\nCREATE TABLE book_status_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    book_id INT NOT NULL,\n    previous_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\'),\n    new_status ENUM(\'대출가능\', \'대출중\', \'예약중\', \'폐기\') NOT NULL,\n    change_reason VARCHAR(200),\n    changed_by VARCHAR(100),\n    change_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_change_date (change_date)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: receives from 대출/예약/반납 관리 (LoanAndReservation)\n- **Reason**: 도서의 대출/반납/예약 등의 이벤트에 따라 도서 상태가 바뀌어야 하므로, 상태 변경 이벤트를 Pub/Sub으로 발행해 도서 관리에서 상태를 갱신하도록 분리하였다.\n- **Interaction Pattern**: 대출/예약/반납 관리에서 도서 상태 관련 이벤트를 발행하고, 도서 관리가 이를 구독하여 Book 상태를 갱신한다.\n\n### 도서 상태 알림 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 및 알림 서비스 (reservation-notification)\n- **Reason**: 도서가 폐기, 신규 등록, 상태 변화 등 중요한 변화가 있을 때 별도의 알림이 필요할 수 있으므로, 도서 관리에서 발생하는 이벤트를 알림 PBC에서 구독한다.\n- **Interaction Pattern**: 도서 관리에서 도서 상태 변화 시 reservation-notification PBC에 이벤트를 발행해 사용자에게 알림을 제공한다.', 'id': 'e0afcd5a-02a5-4396-866d-97168678b79c', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': 'e0afcd5a-02a5-4396-866d-97168678b79c', 'style': '{}', 'width': 560, 'x': 600, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': 'e0afcd5a-02a5-4396-866d-97168678b79c', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LibraryBookManagement', 'displayName': '도서 관리', 'oldName': '', 'policies': [], 'portGenerated': 8080, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_00a6d81d6f9f84aa4236e7c3f60172fe'}, '54d260a8-a496-4db1-957b-0a73e36dd990': {'_type': 'org.uengine.modeling.model.BoundedContext', 'aggregates': [], 'author': 'EYCl46CwWAWvpz2E1BCUpVgPIpa2', 'description': '# Bounded Context Overview: LoanAndReservation (대출/예약/반납 관리)\n\n## Role\n회원의 대출/반납/연장/예약 등 대출 라이프사이클 전반을 담당하며, 도서 대출 상태와 예약 대기열을 관리하고, 대출 이력 및 연체 관리까지 포함한다. 도서의 상태 변화와 회원 상호작용을 프로세스 중심으로 처리한다.\n\n## Key Events\n- LoanApplied\n- LoanApplicationFailedBookNotAvailable\n- LoanCompleted\n- ReservationApplied\n- BookReturned\n- ReturnCompleted\n- LoanExtended\n- LoanExtensionFailedDueToReservation\n- LoanOverdueDetected\n\n# Requirements\n\n## userStory\n\n도서관의 도서 관리와 대출/반납을 통합적으로 관리하는 화면을 만들려고 해.\n\n\'도서 관리\' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 \'대출가능\' 상태가 되고, 이후 대출/반납 상황에 따라 \'대출중\', \'예약중\' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 \'폐기\' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n\n\'대출/반납\' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 \'대출중\'으로 변경되어야 해.\n\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 \'대출가능\'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 \'예약중\' 상태로 변경되어야 해.\n\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해.\n\n## Event\n\n```json\n{\n  "name": "LoanApplied",\n  "displayName": "도서 대출 신청됨",\n  "actor": "회원",\n  "level": 5,\n  "description": "회원이 회원번호 및 이름으로 본인 확인 후 대출할 도서를 선택하고, 대출 기간을 지정하여 대출을 신청함.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서명/ISBN",\n    "대출 기간 선택(7/14/30일)",\n    "도서 상태: 대출가능"\n  ],\n  "outputs": [\n    "대출 신청 기록",\n    "도서 대출 프로세스 시작"\n  ],\n  "nextEvents": [\n    "LoanCompleted"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanApplicationFailedBookNotAvailable",\n  "displayName": "대출 불가(도서 미대출가능)",\n  "actor": "회원",\n  "level": 6,\n  "description": "대출 신청 시 도서가 이미 대출 중이거나 폐기되어 대출이 불가함을 알림.",\n  "inputs": [\n    "도서 상태: 대출중/예약중/폐기"\n  ],\n  "outputs": [\n    "대출 불가 알림",\n    "예약 가능 안내(해당시)"\n  ],\n  "nextEvents": [\n    "ReservationApplied"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanCompleted",\n  "displayName": "도서 대출 완료됨",\n  "actor": "도서 관리 시스템",\n  "level": 7,\n  "description": "대출 신청이 승인되어, 도서의 상태가 \'대출중\'으로 변경되고, 대출 이력이 등록됨.",\n  "inputs": [\n    "대출 신청 승인",\n    "도서 상태: 대출가능"\n  ],\n  "outputs": [\n    "도서 상태: 대출중",\n    "대출 이력 기록",\n    "반납예정일 생성"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "ReservationApplied",\n  "displayName": "도서 예약 신청됨",\n  "actor": "회원",\n  "level": 8,\n  "description": "회원이 대출 중인 도서에 대해 예약 신청을 완료함.",\n  "inputs": [\n    "회원번호",\n    "이름",\n    "도서명/ISBN",\n    "도서 상태: 대출중/예약중"\n  ],\n  "outputs": [\n    "도서 예약 기록",\n    "예약 대기열 추가"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "BookReturned",\n  "displayName": "도서 반납됨",\n  "actor": "회원",\n  "level": 9,\n  "description": "회원이 대출한 도서를 반납 처리함.",\n  "inputs": [\n    "대출 이력",\n    "도서",\n    "회원"\n  ],\n  "outputs": [\n    "도서 반납 처리",\n    "반납일 기록"\n  ],\n  "nextEvents": [\n    "ReturnCompleted"\n  ]\n}\n```\n\n```json\n{\n  "name": "ReturnCompleted",\n  "displayName": "도서 반납 완료됨",\n  "actor": "도서 관리 시스템",\n  "level": 10,\n  "description": "도서 반납 처리가 완료되어, 예약자가 있으면 도서 상태를 \'예약중\'으로, 없으면 \'대출가능\'으로 변경함.",\n  "inputs": [\n    "반납된 도서",\n    "예약자 여부"\n  ],\n  "outputs": [\n    "도서 상태 변경",\n    "반납 이력 기록"\n  ],\n  "nextEvents": [\n    "BookStatusChanged"\n  ]\n}\n```\n\n```json\n{\n  "name": "LoanExtended",\n  "displayName": "도서 대출 연장됨",\n  "actor": "회원",\n  "level": 11,\n  "description": "대출 중인 도서에 대해 회원이 연장 신청을 하여, 연장 조건 충족 시 대출 기간이 연장됨.",\n  "inputs": [\n    "대출 이력",\n    "도서 상태: 대출중",\n    "연장 조건 충족 여부"\n  ],\n  "outputs": [\n    "대출 기간 연장",\n    "반납예정일 변경"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanExtensionFailedDueToReservation",\n  "displayName": "예약자 존재로 대출 연장 불가",\n  "actor": "회원",\n  "level": 12,\n  "description": "해당 도서에 예약자가 있어 대출 연장이 불가함.",\n  "inputs": [\n    "대출 이력",\n    "도서 상태: 예약중",\n    "예약자 존재"\n  ],\n  "outputs": [\n    "연장 불가 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n```json\n{\n  "name": "LoanOverdueDetected",\n  "displayName": "대출 연체 발생됨",\n  "actor": "도서 관리 시스템",\n  "level": 13,\n  "description": "반납 예정일이 지나도록 도서가 반납되지 않아 연체 상태로 전환됨.",\n  "inputs": [\n    "반납 예정일 경과",\n    "도서 미반납"\n  ],\n  "outputs": [\n    "대출 상태: 연체",\n    "회원 연체 알림"\n  ],\n  "nextEvents": []\n}\n```\n\n## DDL\n\n```sql\n-- 회원 테이블\nCREATE TABLE members (\n    member_id VARCHAR(20) PRIMARY KEY,\n    member_name VARCHAR(100) NOT NULL,\n    phone VARCHAR(20),\n    email VARCHAR(100),\n    address TEXT,\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'ACTIVE\', \'INACTIVE\', \'SUSPENDED\') DEFAULT \'ACTIVE\',\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n\n```sql\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM(\'대출중\', \'연체\', \'반납완료\', \'연장\') DEFAULT \'대출중\',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n```\n\n```sql\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM(\'예약중\', \'예약완료\', \'예약취소\', \'예약만료\') DEFAULT \'예약중\',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n```\n\n```sql\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM(\'대출\', \'반납\', \'연장\', \'연체알림\', \'분실신고\') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n```\n\n```sql\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);\n```\n\n\n## Context Relations\n\n### 도서 상태 변경 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 도서 관리 (LibraryBookManagement)\n- **Reason**: 도서의 대출/반납/예약 등의 이벤트에 따라 도서 상태가 바뀌어야 하므로, 상태 변경 이벤트를 Pub/Sub으로 발행해 도서 관리에서 상태를 갱신하도록 분리하였다.\n- **Interaction Pattern**: 대출/예약/반납 관리에서 도서 상태 관련 이벤트를 발행하고, 도서 관리가 이를 구독하여 Book 상태를 갱신한다.\n\n### 예약/알림 연동 Pub/Sub\n- **Type**: Pub/Sub\n- **Direction**: sends to 예약 및 알림 서비스 (reservation-notification)\n- **Reason**: 알림 및 예약 기능은 범용 서비스로 PBC에 위임하므로, 대출/예약/반납 관리에서 예약 또는 알림 트리거 이벤트를 발행하면 reservation-notification PBC가 구독하여 알림/예약 처리를 한다.\n- **Interaction Pattern**: 대출, 반납, 연체 등 이벤트가 발생할 때 예약 및 알림 서비스(PBC)로 이벤트를 발행해 알림/예약을 자동화한다.', 'id': '54d260a8-a496-4db1-957b-0a73e36dd990', 'elementView': {'_type': 'org.uengine.modeling.model.BoundedContext', 'height': 590, 'id': '54d260a8-a496-4db1-957b-0a73e36dd990', 'style': '{}', 'width': 560, 'x': 1185.0, 'y': 450}, 'gitURL': None, 'hexagonalView': {'_type': 'org.uengine.modeling.model.BoundedContextHexagonal', 'height': 350, 'id': '54d260a8-a496-4db1-957b-0a73e36dd990', 'style': '{}', 'width': 350, 'x': 235, 'y': 365}, 'members': [], 'name': 'LoanAndReservation', 'displayName': '대출/예약/반납 관리', 'oldName': '', 'policies': [], 'portGenerated': 8081, 'preferredPlatform': 'template-spring-boot', 'preferredPlatformConf': {}, 'rotateStatus': False, 'tempId': '', 'templatePerElements': {}, 'views': [], 'definitionId': '163972132_es_00a6d81d6f9f84aa4236e7c3f60172fe', 'requirements': {'ddl': "-- 회원 테이블\nCREATE TABLE members (\n    member_id VARCHAR(20) PRIMARY KEY,\n    member_name VARCHAR(100) NOT NULL,\n    phone VARCHAR(20),\n    email VARCHAR(100),\n    address TEXT,\n    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED') DEFAULT 'ACTIVE',\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n-- 대출 테이블\nCREATE TABLE loans (\n    loan_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    loan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    due_date DATETIME NOT NULL,\n    return_date DATETIME NULL,\n    loan_period_days INT NOT NULL CHECK (loan_period_days IN (7, 14, 30)),\n    status ENUM('대출중', '연체', '반납완료', '연장') DEFAULT '대출중',\n    extension_count INT DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_due_date (due_date)\n);\n-- 예약 테이블\nCREATE TABLE reservations (\n    reservation_id INT AUTO_INCREMENT PRIMARY KEY,\n    member_id VARCHAR(20) NOT NULL,\n    book_id INT NOT NULL,\n    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('예약중', '예약완료', '예약취소', '예약만료') DEFAULT '예약중',\n    notification_sent BOOLEAN DEFAULT FALSE,\n    expiry_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (member_id) REFERENCES members(member_id),\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    INDEX idx_member_id (member_id),\n    INDEX idx_book_id (book_id),\n    INDEX idx_status (status),\n    INDEX idx_reservation_date (reservation_date)\n);\n-- 대출 이력 테이블 (모든 대출 활동의 상세 로그)\nCREATE TABLE loan_history (\n    history_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    action_type ENUM('대출', '반납', '연장', '연체알림', '분실신고') NOT NULL,\n    action_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    previous_due_date DATETIME NULL,\n    new_due_date DATETIME NULL,\n    notes TEXT,\n    processed_by VARCHAR(100),\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_action_type (action_type),\n    INDEX idx_action_date (action_date)\n);\n-- 연체 관리 테이블\nCREATE TABLE overdue_records (\n    overdue_id INT AUTO_INCREMENT PRIMARY KEY,\n    loan_id INT NOT NULL,\n    overdue_days INT NOT NULL,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    fine_paid BOOLEAN DEFAULT FALSE,\n    notification_count INT DEFAULT 0,\n    last_notification_date DATETIME NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (loan_id) REFERENCES loans(loan_id),\n    INDEX idx_loan_id (loan_id),\n    INDEX idx_overdue_days (overdue_days)\n);", 'event': '{"name":"LoanApplied","displayName":"도서 대출 신청됨","actor":"회원","level":5,"description":"회원이 회원번호 및 이름으로 본인 확인 후 대출할 도서를 선택하고, 대출 기간을 지정하여 대출을 신청함.","inputs":["회원번호","이름","도서명/ISBN","대출 기간 선택(7/14/30일)","도서 상태: 대출가능"],"outputs":["대출 신청 기록","도서 대출 프로세스 시작"],"nextEvents":["LoanCompleted"]}\n{"name":"LoanApplicationFailedBookNotAvailable","displayName":"대출 불가(도서 미대출가능)","actor":"회원","level":6,"description":"대출 신청 시 도서가 이미 대출 중이거나 폐기되어 대출이 불가함을 알림.","inputs":["도서 상태: 대출중/예약중/폐기"],"outputs":["대출 불가 알림","예약 가능 안내(해당시)"],"nextEvents":["ReservationApplied"]}\n{"name":"LoanCompleted","displayName":"도서 대출 완료됨","actor":"도서 관리 시스템","level":7,"description":"대출 신청이 승인되어, 도서의 상태가 \'대출중\'으로 변경되고, 대출 이력이 등록됨.","inputs":["대출 신청 승인","도서 상태: 대출가능"],"outputs":["도서 상태: 대출중","대출 이력 기록","반납예정일 생성"],"nextEvents":["BookStatusChanged"]}\n{"name":"ReservationApplied","displayName":"도서 예약 신청됨","actor":"회원","level":8,"description":"회원이 대출 중인 도서에 대해 예약 신청을 완료함.","inputs":["회원번호","이름","도서명/ISBN","도서 상태: 대출중/예약중"],"outputs":["도서 예약 기록","예약 대기열 추가"],"nextEvents":["BookStatusChanged"]}\n{"name":"BookReturned","displayName":"도서 반납됨","actor":"회원","level":9,"description":"회원이 대출한 도서를 반납 처리함.","inputs":["대출 이력","도서","회원"],"outputs":["도서 반납 처리","반납일 기록"],"nextEvents":["ReturnCompleted"]}\n{"name":"ReturnCompleted","displayName":"도서 반납 완료됨","actor":"도서 관리 시스템","level":10,"description":"도서 반납 처리가 완료되어, 예약자가 있으면 도서 상태를 \'예약중\'으로, 없으면 \'대출가능\'으로 변경함.","inputs":["반납된 도서","예약자 여부"],"outputs":["도서 상태 변경","반납 이력 기록"],"nextEvents":["BookStatusChanged"]}\n{"name":"LoanExtended","displayName":"도서 대출 연장됨","actor":"회원","level":11,"description":"대출 중인 도서에 대해 회원이 연장 신청을 하여, 연장 조건 충족 시 대출 기간이 연장됨.","inputs":["대출 이력","도서 상태: 대출중","연장 조건 충족 여부"],"outputs":["대출 기간 연장","반납예정일 변경"],"nextEvents":[]}\n{"name":"LoanExtensionFailedDueToReservation","displayName":"예약자 존재로 대출 연장 불가","actor":"회원","level":12,"description":"해당 도서에 예약자가 있어 대출 연장이 불가함.","inputs":["대출 이력","도서 상태: 예약중","예약자 존재"],"outputs":["연장 불가 알림"],"nextEvents":[]}\n{"name":"LoanOverdueDetected","displayName":"대출 연체 발생됨","actor":"도서 관리 시스템","level":13,"description":"반납 예정일이 지나도록 도서가 반납되지 않아 연체 상태로 전환됨.","inputs":["반납 예정일 경과","도서 미반납"],"outputs":["대출 상태: 연체","회원 연체 알림"],"nextEvents":[]}', 'eventNames': 'LoanApplied, LoanApplicationFailedBookNotAvailable, LoanCompleted, ReservationApplied, BookReturned, ReturnCompleted, LoanExtended, LoanExtensionFailedDueToReservation, LoanOverdueDetected 이벤트가 발생할 수 있어.', 'userStory': "도서관의 도서 관리와 대출/반납을 통합적으로 관리하는 화면을 만들려고 해.\n'도서 관리' 화면에서는 새로운 도서를 등록하고 현재 보유한 도서들의 상태를 관리할 수 있어야 해. 도서 등록 시에는 도서명, ISBN, 저자, 출판사, 카테고리 정보를 입력받아야 해. ISBN은 13자리 숫자여야 하고 중복 확인이 필요해. 카테고리는 소설/비소설/학술/잡지 중에서 선택할 수 있어야 해. 등록된 도서는 처음에 '대출가능' 상태가 되고, 이후 대출/반납 상황에 따라 '대출중', '예약중' 상태로 자동으로 변경되어야 해. 도서가 훼손되거나 분실된 경우 '폐기' 처리가 가능해야 하며, 폐기된 도서는 더 이상 대출이 불가능해야 해.\n'대출/반납' 화면에서는 회원이 도서를 대출하고 반납하는 것을 관리할 수 있어야 해. 대출 신청 시에는 회원번호와 이름으로 회원을 확인하고, 대출할 도서를 선택해야 해. 도서는 도서명이나 ISBN으로 검색할 수 있어야 해. 대출 기간은 7일/14일/30일 중에서 선택할 수 있어. 만약 대출하려는 도서가 이미 대출 중이라면, 예약 신청이 가능해야 해. 대출이 완료되면 해당 도서의 상태는 자동으로 '대출중'으로 변경되어야 해.\n대출 현황 화면에서는 현재 대출 중인 도서들의 목록을 볼 수 있어야 해. 각 대출 건에 대해 대출일, 반납예정일, 현재 상태(대출중/연체/반납완료)를 확인할 수 있어야 하고, 대출 중인 도서는 연장이나 반납 처리가 가능해야 해. 도서가 반납되면 자동으로 해당 도서의 상태가 '대출가능'으로 변경되어야 해. 만약 예약자가 있는 도서가 반납되면, 해당 도서는 '예약중' 상태로 변경되어야 해.\n각 도서별로 대출 이력과 상태 변경 이력을 조회할 수 있어야 하고, 이를 통해 도서의 대출 현황과 상태 변화를 추적할 수 있어야 해."}}}, relations={}), isCompleted=False, isFailed=False, logs=[LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message='[ROOT_GRAPH] Starting new event storming generation process'), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message='[ROOT_GRAPH] Starting bounded context creation process'), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message='[ROOT_GRAPH] Processing 2 bounded contexts for creation'), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message="[ROOT_GRAPH] Processing bounded context 1/2: 'LibraryBookManagement'"), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message="[ROOT_GRAPH] Creating new bounded context: 'LibraryBookManagement'"), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message="[ROOT_GRAPH] Successfully created bounded context: 'LibraryBookManagement' with ID: 'e0afcd5a-02a5-4396-866d-97168678b79c'"), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message="[ROOT_GRAPH] Processing bounded context 2/2: 'LoanAndReservation'"), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message="[ROOT_GRAPH] Creating new bounded context: 'LoanAndReservation'"), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message="[ROOT_GRAPH] Successfully created bounded context: 'LoanAndReservation' with ID: '54d260a8-a496-4db1-957b-0a73e36dd990'"), LogModel(created_at='2025-07-04T11:43:28.973585', level='info', message='[ROOT_GRAPH] Bounded context creation completed successfully. Created: 2 contexts')], totalProgressCount=12, currentProgressCount=1, lastCompletedRootGraphNode=None, lastCompletedSubGraphNode=None))